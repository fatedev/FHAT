/*-----------------------------------------------------------------------------
/	Copyright (C) TYPE-MOON All Rights Reserved.
/		ギャラリー画像表示レイヤー
/----------------------------------------------------------------------------*/
@if(__GALLERYIMAGELAYER_DEFINED__==0)
@set(__GALLERYIMAGELAYER_DEFINED__=1)

Scripts.execStorage("subroutine.tjs");

class GalleryImageLayer extends FadeLayer
{
	//	通常のボタン
	var buttondata	= [
	//	モード	ID		画像名			ヒント									座標
		[ 3,	"prev",	"gli_leftpaper",	"前の画像へ",						505, 567 ],
		[ 3,	"back",	"gli_back",			"サムネールメニューへ戻ります。",	615, 566 ],
		[ 3,	"next",	"gli_rightpaper",	"次の画像へ",						690, 567 ],
	];
	//	壁紙設定に利用するボタン
	var wpmodebuttondata	= [
		[ 2,	"center",	"wp_center",	"指定の大きさでデスクトップの中央に表示します。",	  5, 470 ],
		[ 2,	"magnify",	"wp_magnify",	"デスクトップのサイズに拡大して表示します。",		 65, 470 ],
		[ 2,	"tile",		"wp_tile",		"そのままの大きさでデスクトップに敷き詰めます。",	125, 470 ]
	];
	//	壁紙サイズ指定に利用するボタン
	var wpsizebuttondata	= [
		[ 2,	"svga",		"wp_svga",		"SVGA(800x600)サイズの画像を壁紙にします。",	  5, 535 ],
		[ 2,	"xga",		"wp_xga",		"XGA(1024x768)サイズの画像を壁紙にします。",	 65, 535 ],
		[ 2,	"qvga",		"wp_qvga",		"QuadVGA(1280x960)サイズの画像を壁紙にします。",125, 535 ],
		[ 2,	"uxga",		"wp_uxga",		"UXGA(1600x1200)サイズの画像を壁紙にします。",	185, 535 ]
	];
	//	壁紙通常ボタン
	var wpbuttondata	= [
		[ 3,	"set",	"wp_setpaper",	"現在の画像を壁紙に設定します。",	278, 554 ]
	];
	var wpsize	= %[
		svga:	void,
		xga:	[ 1024, 768 ],
		qvga:	[ 1280, 960 ],
		uxga:	void	//	元々UXGAのサイズで保存されているので
	];
	var highAccuracy	= true;	//	高精度の縮小処理を行うか？
	var defaulttime=300;
	var scrollInterval	= 33;
	var scrollTotalTime	= 3000;
	var real_extension	= "wp_real-";
	var guest_extension	= "wp_guest-";
	var wallpaperStorage= "wallpaper.bmp";
	var	wallpapermode;

	var owner;
	var layers;
	var curlayer;
	var announce;

	var buttons;
	var wpmodes;
	var wpsizes;

	var	storage;

	var time;

	var _state;

	var dummylayer;

	var setwallpaper_trigger;
	var changewallpaper;

	var showed;

	//	画像のスクロール
	var	isLeftDown	= false;
	var	lastx, lasty;
	var	mvsx, mvsy;
	var	lastImageLeft, lastImageTop;

	//	トランジション時、同じサイズにする
	var	orgWidth, orgHeight;

	//	画像のスクロール
	var	timer, xscroll, yscroll;

	function GalleryImageLayer(win, par, bros, wallpaper=false)
	{
		super.FadeLayer(...);
		name	= "画像表示レイヤー";
		wallpaperStorage	= win.saveDataLocation + "/" + wallpaperStorage;

		this.owner		= bros;
		setPos(0, 0);
		setImageSize(par.width, par.height);
		setSizeToImageSize();

		layers		= [];
		layers[0]	= this;
		layers[1]	= new GalleryImageFlipLayer(win, par, this);
		curlayer	= 0;

		buttons	= createButtons(win, parent, buttondata,, false,0);
		buttons.setAll("target", this);

		if(wallpapermode = wallpaper)
		{
			//	壁紙用ボタンの作成
			with(wpmodes = createButtons(win, parent, wpmodebuttondata,, false, 0))
				.setAll("target", this);
			with(wpsizes = createButtons(win, parent, wpsizebuttondata,, false, 0))
				.setAll("target", this);
			for(var i=0; i<wpbuttondata.count; i++)
			{
				var wpd = wpbuttondata[i];
				with(buttons.add(wpd[1], wpd[4], wpd[5], wpd[2], wpd[3]))
				{
					.mode		= wpd[0];
					.target		= this;
					.focusable	= true;
					.visible	= false;
					.opacity	= 0;
				}
			}

			//	前回の設定を復帰する。
			sf.wallpaperMode	= "center" if sf.wallpaperMode === void;
			sf.wallpaperSize	= "xga" if sf.wallpaperSize === void;

			//	ボタンを設定に沿った状態にする。
			wpmodes.get(sf.wallpaperMode).on();
			wpsizes.get(sf.wallpaperSize).on();

			Plugins.link("wallpaper.dll");
			Plugins.link("resize.dll") if highAccuracy;
		}
		else
			guest_extension	= "";

		visible		= false;
	}

	function finalize()
	{
		release(timer);
		if(dummylayer!=void)
		{
			for(var i=0; i<dummylayer.count; i++)
				release(dummylayer[i]);
			invalidate dummylayer;
		}
		release(wpsizes);
		release(wpmodes);
		release(buttons);
		release(layers[1]);
		if(wallpapermode)
		{
			Plugins.unlink("resize.dll") if highAccuracy;
			Plugins.unlink("wallpaper.dll");
		}
		super.finalize(...);
	}

	function show(fname, time=defaulttime)
	{
		storage	= fname;
		with(layers[curlayer])
		{
			.loadImages(guest_extension+storage);
			.imageLeft	= 0;
			.imageTop	= 0;
		}
		state	= 0;

		showed	= true;
		with(layers[curlayer])
		{
			.fade(255, time,, startScroll);
			.focusable	= true;
			.focus();
		}
		layers[(curlayer+1)&1].focusable	= true;
	}

	function change(fname, time=defaulttime, rule="")
	{
		dm("change: "+fname);
		release(timer);
		var nl	= (curlayer + 1) & 1;
		var cur	= curlayer;
		curlayer= nl;

		var method	= rule=="" ? "crossfade" : "universal";

		with(layers[nl])
		{
			storage	= fname;
			.loadImages(guest_extension+storage);
			.stopTransition();
		}
		with(layers[cur])
		{
			.stopTransition();

			//	トランジションは表示座標でなく画像自体の情報で行われるので、
			//	元の画像が大きかった場合は画像を縮小してトランジションさせる
//			dm(@"${.imageWidth}>${.width} || ${.imageHeight}>${.height}");
			if(.imageWidth>.width || .imageHeight>.height)
			{
				//	表示中の画像を別レイヤーに移し、(0, 0)の位置へ描画する
				var	l	= new global.Layer(window, this);
				l.setImageSize(.width, .height);
				l.copyRect(0, 0, layers[cur], -.imageLeft, -.imageTop, .width, .height);
				.copyRect(0, 0, l, 0, 0, .width, .height);
				invalidate l;
				.setImagePos(0, 0);
				.setImageSize(.width, .height);
			}

			//	新しい方の画像サイズが大きかったら、古い方を大きくしてサイズをあわせる
			if(.imageWidth<layers[nl].imageWidth)
				.imageWidth	= layers[nl].imageWidth;
			if(.imageHeight<layers[nl].imageHeight)
				.imageHeight= layers[nl].imageHeight;

//			dm("begin transition: "+.name+" -> "+layers[nl].name);
			.beginTransition(%[method:method,rule:rule,children:true,time:time,vague:8], layers[nl]);
		}
	}

	function hide(time=defaulttime)
	{
		release(timer);

		showed	= false;
		layers[curlayer].stopTransition();
		layers[(curlayer+1)&1].stopTransition();
//	トランジションで切り替えると前後の位置関係が変わってしまうのでヤメー
/*		with(owner)
		{
			.stopTransition();
			.focusable		= true;
			.currentpage	= page;	//	移動しているかもしれないので
		}
		dm("begin transition: "+layers[curlayer].name+" -> "+owner.name);
		layers[curlayer].beginTransition(%[method:"crossfade",children:true,time:time], owner);
*/
		with(layers[curlayer])
		{
			.fade(0, time);
			.focusable	= false;
		}
		layers[(curlayer+1)&1].focusable	= false;

		if(typeof owner.onImageClosed != "undefined")
			owner.onImageClosed();

		//	ボタンも隠す
		hideButtons();
	}

	function switchState()
	{
		_state	= (state + 1) & 1;
		buttons.execAll("fade", 255 * state, defaulttime, 0);
		wpmodes.execAll("fade", 255 * state, defaulttime, 0) if wpmodes != void;
		wpsizes.execAll("fade", 255 * state, defaulttime, 0) if wpsizes != void;

		layers[0].focusable = layers[1].focusable =	!state;
	}

	function hideButtons()
	{
		if(state!=0)
		{
			buttons.execAll("fade", 0, time, 0);
			wpmodes.execAll("fade", 0, time, 0) if wpmodes != void;
			wpsizes.execAll("fade", 0, time, 0) if wpsizes != void;
			_state	= 0;
			layers[0].focusable = layers[1].focusable =	true;
		}
	}

	function onButtonDown(btn)
	{
		dm("on button down: "+btn.id);
		if(!showed)	return;	//	受付状態になければ無視する
		var fn;
		switch(btn.id)
		{
		//	ギャラリー閲覧
		case "prev":
			fn	= owner.getPrevImage(storage);
//			dm("prev: "+storage+" → "+fn);
			change(fn,, "pageleft") if fn != "" && fn != storage;
			break;
		case "next":
			fn	= owner.getNextImage(storage);
//			dm("next: "+storage+" → "+fn);
			change(fn,, "pageright")if fn != "" && fn != storage;
			break;
		case "back":
			hide();
			break;

		//	壁紙モード
		case "center":
		case "magnify":
		case "tile":
			sf.wallpaperMode	= btn.id;
			break;

		//	壁紙サイズ
		case "svga":
		case "xga":
		case "qvga":
		case "uxga":
			sf.wallpaperSize	= btn.id;
			break;

		//	壁紙設定
		case "set":
			{
				//	ファイル検索
				var fname	= Storages.chopStorageExt(Storages.extractStorageName(storage));
//				fname	+= "-wp";
/*				fname	= real_extension+fname;
				if(!Storages.isExistentStorage(fname))
				{
					dm("is'nt existent storage: "+fname);
					break;
				}
*/				dm("set wallpaper: "+fname);

				//	非同期に壁紙を変更
				if(sf.wallpaperSize == "svga")
					changewallpaper	= guest_extension+fname;	//	800x600は表示しているものと同じ
				else
					changewallpaper	= real_extension+fname;	//	変更するファイル名
				with(setwallpaper_trigger	= new AsyncTrigger(changeWallPaper, ""))
				{
					.cached	= true;
					.mode	= atmAtIdle;
					.trigger();
				}

				//	「壁紙変更中」を表示
				with(announce = new global.Layer(window, layers[curlayer]))
				{
					.loadImages("wp_changing");
					.setSizeToImageSize();
					.setPos((width - .width)>>1, (height - .height)>>1);
					.visible	= true;
				}
			}
			break;
		}
	}

	//	壁紙の変更
	function changeWallPaper()
	{
		//	bmpにして保存する
		var fname	= changewallpaper;
		var layer = new global.Layer(window, this);
		var sz = wpsize[sf.wallpaperSize];
		if(sz != void)
		{
			var org = new global.Layer(window, this);
			org.loadImages(fname);
			layer.setImageSize(sz[0], sz[1]);
			if(highAccuracy)
				AreaAverageReducation(org, layer);	//	面積平均法による縮小
			else
				layer.operateStretch(0, 0, sz[0], sz[1], org, 0, 0, org.imageWidth, org.imageHeight, omOpaque,, stFastLinear);
			invalidate org;
		}
		else
			layer.loadImages(fname);
		fname	= System.exePath+"/"+fname;	//	実行ファイルのある場所へ保存
		layer.saveLayerImage(wallpaperStorage, "bmp24");
		invalidate layer;

		//	bmpファイルを壁紙に設定する
		var elm = %[storage:wallpaperStorage];
		elm[sf.wallpaperMode]	= true;
		global.setwallpaper(elm);

		//	告知が出ていたら、消す
		release(announce);
		announce	= void;

		//	トリガを消す
		release(setwallpaper_trigger);
		setwallpaper_trigger	= void;
	}

	function cancel()
	{
		if(state == 1)
			switchState();
		else
			hide();
	}

	function onMouseDown(x, y, button, shift)
	{
		if(!showed)	return;	//	受付状態になければ無視する
		if(inTransition)
			//	トランジション中はクリックを受け付けない
			;//owner.onMouseDown(...);	//	これやると強制終了する…
		else if(button==mbLeft)
		{
			isLeftDown	= true;
			mvsx = lastx = x, mvsy = lasty = y;
			lastImageLeft	= layers[curlayer].imageLeft;
			lastImageTop	= layers[curlayer].imageTop;
		}
		else if(button==mbRight)
			cancel();

		release(timer);
	}

	function onMouseMove(x, y)
	{
		if(!showed)	return;	//	受付状態になければ無視する
		if(isLeftDown)
		{
			with(layers[curlayer])
			{
				var	l	= .imageLeft + x - lastx;
				var	t	= .imageTop + y - lasty;
				if(l>0)
					l	= 0;
				else if(l<.width-.imageWidth)
					l	= .width - .imageWidth;
				if(t>0)
					t	= 0;
				else if(t<.height-.imageHeight)
					t	= .height - .imageHeight;
				.setImagePos(l, t);
				lastx	= x;
				lasty	= y;
			}
		}
	}

	function onMouseUp(x, y, button, shift)
	{
		if(!showed)	return;	//	受付状態になければ無視する
		if(isLeftDown)
		{
			if(Math.abs(mvsx-x)+Math.abs(mvsy-y)<5)
				switchState();
			isLeftDown	= false;
		}
	}

	function onKeyDown(key, shift)
	{
		switch(key)
		{
		case VK_ESCAPE:
		case VK_HOME:
//		case VK_BACK:
//		case VK_DELETE:
			cancel();
			break;

		case VK_RETURN:
		case VK_SPACE:
			switchState();
			break;

		case VK_UP:
		case VK_LEFT:
			if(state == 0)
				onButtonDown(%[id:"prev"]);
			else
				super.onKeyDown(key, shift, true);
			break;

		case VK_DOWN:
		case VK_RIGHT:
			if(state == 0)
				onButtonDown(%[id:"next"]);
			else
				super.onKeyDown(key, shift, true);
			break;

		default:
			super.onKeyDown(key, shift, true);
		}
	}

	function onTransitionCompleted(dest, src)
	{
		super.onTransitionCompleted(...);
		layers[curlayer].focus();

		startScroll();
	}

	function startScroll()
	{
		if(!layers[curlayer] isvalid)
			return;
		with(layers[curlayer])
		{
			//	サイズが大きい場合は、スクロールする
			var upc	= scrollTotalTime / scrollInterval;	//	更新回数
			xscroll	= .imageWidth>.width ? (.imageWidth - .width) / upc : 0;
			yscroll	= .imageHeight>.height ? (.imageHeight - . height) / upc : 0;
			if(xscroll+yscroll>0)
			{
				with(timer = new Timer(onScroll, ""))
				{
					.interval	= scrollInterval;
					.enabled	= true;
				}
			}
		}
	}

	function onScroll()
	{
		with(layers[curlayer])
		{
			var stop	= 0;
			if(.width - .imageLeft> .imageWidth - xscroll)
			{
				.imageLeft	=  .width - .imageWidth;
				stop++;
			}
			else
				.imageLeft	-= xscroll;
			if(.height - .imageTop > .imageHeight - yscroll)
			{
				.imageTop	= .height - .imageHeight;
				stop++;
			}
			else
				.imageTop	-= yscroll;
			if(stop==2)
				release(timer);
		}
	}

	property state
	{
		setter(s)
		{
			s &= 1;
			_state	= s;
			buttons.setAll("opacity", 255 * s);
			wpmodes.setAll("opacity", 255 * s) if wpmodes != void;
			wpsizes.setAll("opacity", 255 * s) if wpsizes != void;
		}
		getter	{ return _state; }
	}
}

class GalleryImageFlipLayer extends FadeLayer
{
	var owner;

	function GalleryImageFlipLayer(win, par, owner)
	{
		super.FadeLayer(...);
		name	= "画像表示レイヤー(flip)";

		this.owner	= owner;
		setPos(0, 0);
		setImageSize(par.width, par.height);
		setSizeToImageSize();
		visible	= false;
		opacity	= 255;
	}

	function finalize()
	{
		super.finalize(...);
	}

	function onButtonDown()	{ return owner.onButtonDown(...); }
	function onMouseDown()	{ return owner.onMouseDown(...); }
	function onMouseMove()	{ return owner.onMouseMove(...); }
	function onMouseUp()	{ return owner.onMouseUp(...); }
	function onKeyDown()	{ return owner.onKeyDown(...); }
	function onJoyStick()	{ return owner.onJoyStick(...); }
	function onTransitionCompleted()	{ return owner.onTransitionCompleted(...); }
}

/*----------------------------------------------------------------------------/
/	
/----------------------------------------------------------------------------*/
@endif