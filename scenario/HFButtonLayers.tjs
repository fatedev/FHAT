/*-----------------------------------------------------------------------------/
/	Copyright (C) 2004 TYPE-MOON All Rights Reserved.
/		花札ゲーム用のボタンレイヤー
/		(それなりにまとまっているので、使っても良いかと)
/-----------------------------------------------------------------------------*/
@if(__HF_BUTTONLAYER_DEFINED__==0)
@set(__HF_BUTTONLAYER_DEFINED__=1)
Scripts.execStorage("subroutine.tjs");
Scripts.execStorage("HFChipLayer.tjs");

var hfButtons	= [];
var hfDirections= %[
	VK_LEFT		=> 0,
	VK_RIGHT	=> 1,
	VK_UP		=> 2,
	VK_DOWN		=> 3,
];

/*-----------------------------------------------------------------------------/
/	押しボタン
/-----------------------------------------------------------------------------*/
class PushButtonLayer extends ChipLayer
{
	var imagesept;		//	画像の分割数

	var _state;		//	[ 0: Normal, 1: Enter, 2: Push, 3: Disable ]
	var _enabled;
	var entered;
//	var buttontype;
	var move2dir;
	var	enterse;

	var _buttons;

	var	owner;

	function PushButtonLayer(win, par, storage, is=4)
	{
//		dm("is = "+is);
		name	= storage;
		super.ChipLayer(...);
//		buttontype	= "push";
		_buttons	= .hfButtons;
		_buttons.add(this);

		imagesept	= is;
		hitThreshold= 0;
//		focusable	= true;

		if(storage != "")
			loadImages(storage);
		enabled		= true;
		focusable	= true;

		owner	= par;
	}

	function finalize()
	{
		if(_buttons isvalid)
		{
			for(var i=0; i<_buttons.count; i++)
			{
				if(_buttons[i] == this)
				{
					_buttons.erase(i);
					break;
				}
			}
		}
		super.finalize(...);
	}

	function loadImages(storage)
	{
		super.loadImages(storage);
		setSize(imageWidth \ imagesept, imageHeight);
	}

	function draw()
	{
		imageLeft	= - width * state;
	}

	property enterValue
	{
		getter	{ return 1; }
	}

	property leaveValue
	{
		getter	{ return 0; }
	}

	function enter()
	{
//		dm(name+": enter ("+enabled+", "+state+")");
		if(enabled && state != enterValue)
		{
			state	= enterValue;
			playSound(enterse);
			if(typeof owner.onButtonEnter != "undefined")
				owner.onButtonEnter(this);
//			hfSound.クリック = true;	//	クリック音再生
//			hfSound.ボタンエンター	= false;	//	再生されていたら停止する
//			hfSound.ボタンエンター	= true;		//	(focusが変化するたびに再生されてしまう)
		}
		entered	= true;
//		dm(@"enter(${name})");
	}

	function leave()
	{
//		dm(name+": leave");
		if(enabled && state != leaveValue)
		{
			state	= leaveValue;
			if(typeof owner.onButtonLeave != "undefined")
				owner.onButtonLeave(this);
		}
		entered	= false;
//		dm(@"leave(${name})");
	}

	function press()
	{
		if(enabled)
			state	= 2;
	}

	function push()
	{
		if(enabled && state == 2)
		{
			state	= entered ? 1 : 0;
			if(typeof owner.onButtonDown != "undefined")
				owner.onButtonDown(this);
//			hfSound.決定 = true;	//	決定音再生
		}
	}

	function onFocus()		{	enter();	}
	function onBlur()		{	leave();	}
	function onMouseEnter()	{	if(focusable && window.focusedLayer != this) focus(); else enter();	}
	function onMouseLeave()	{	leave();	}

	function onMouseDown(x, y, button, shift)
	{
		if(button == mbLeft)
			press();
		else
			owner.onMouseDown(...);
	}

	function onMouseUp(x, y, button, shift)
	{
		if(button == mbLeft)
			push();
	}

	function onKeyDown(key, shift)
	{
		switch(key)
		{
		case VK_RETURN:
		case VK_SPACE:
		case VK_Z:
//		case VK_PAD1:
			press();	//	状態を変更しておいて、
			push();		//	押す
			return;

		case VK_ESCAPE:
		case VK_DELETE:
		case VK_BACK:
		case VK_X:
//		case VK_PAD2:
			owner.onMouseDown(,, mbRight);
			return;
		}
		var dir;
		//	各方向にあるボタンへフォーカスを移動する
		if(move2dir && (dir = hfDirections[key]) !== void)
		{
			searchButton(dir);
			return;
		}
		return super.onKeyDown(key, shift, true);
	}

	function searchButton(dir)
	{
		var addmissible_error = 5;
		var	l = left + (width >> 1), t = top + (height >> 1);
		var diff = 0x7fffffff;
		var target;
		var btns	= hfButtons;
		for(var i=0; i<btns.count; i++)
		{
			//	元のボタンか選択不可能なボタンは無視する
			if(btns[i] == this || !btns[i].focusable)
				continue;

			var d, rd;
			var cl, ct;
			with(btns[i])
				cl = .left + (.width >> 1), ct = .top + (.height >> 1);
			switch(dir)
			{
			case 0:	//	左
				d	= l - cl;			//	距離
				rd	= Math.abs(ct - t);	//	直角方向の差
				d	= width + d if d <= 0;			//	検索方向に見つからなかったときのための保険
				break;

			case 1:	//	上
				d	= t - ct;
				rd	= Math.abs(cl - l);
				d	= height + d if d <= 0;
				break;

			case 2:	//	右
				d	= cl - l;
				rd	= Math.abs(ct - t);
				d	= width + d if d <= 0;
				break;

			case 3:	//	下
				d	= ct - t;
				rd	= Math.abs(cl - l);
				d	= height + d if d <= 0;
				break;
			}
			d	+= rd;
			if(diff > d)	//	直前の候補より近いなら、そちらへ
			{
				diff	= d;
				target	= btns[i];
			}
		}
		if(target)
			target.focus();	//	見つかったら、フォーカスを渡す
		return target;
	}

	property disableValue
	{
		getter	{ return imagesept - 1; }
	}

	property enabled
	{
		setter(e)
		{
			if(e)
				state	= entered ? 1 : 0;
			else
				state	= disableValue;
//			dm(name+".state = "+state);
			_enabled	= focusable = e;
		}
		getter	{ return _enabled; }
	}

	property state
	{
		setter(s)
		{
			if(state != s)
			{
//				dm(name+".state = "+state+"→"+s);
				_state	= s;
				draw(s);
			}
		}
		getter	{ return _state; }
	}
}

/*-----------------------------------------------------------------------------/
/	ON/OFFスイッチ
/-----------------------------------------------------------------------------*/
class OnOffButtonLayer extends PushButtonLayer
{
	//	state = [ 0: Normal, 1: Enter, 2: Push, 3: On, 4: On-Enter, 5: Disable ]
	var _on;

	function OnOffButtonLayer(win, par, storage, is)
	{
		super.PushButtonLayer(...);
//		buttontype	= "onoff";
	}

	property enterValue
	{
		getter	{ return on ? 4 : 1; }
	}

	property leaveValue
	{
		getter	{ return on ? 3 : 0; }
	}

	function push()
	{
		if(enabled)
		{
			on		= !on;
			state	= entered ? (on ? 4 : 1) : (on ? 3 : 0);
			if(typeof owner.onButtonDown != "undefined")
				owner.onButtonDown(this);
		}
	}

	property on
	{
		setter(o)	{	_on	= o;	}
		getter		{	return _on;	}
	}
}

/*-----------------------------------------------------------------------------/
/	ラジオボタン
/-----------------------------------------------------------------------------*/
class RadioButtonLayer extends OnOffButtonLayer
{
	var head;	//	グループの先頭
	var bros;	//	同じグループの次のボタン

	function RadioButtonLayer(win, par, storage, is)
	{
		super.OnOffButtonLayer(...);
		head	= this;
//		dm("image sept = "+imagesept);
	}

	//	グループにボタンを追加
	function addButtonToGroup(storage, is=imagesept)
	{
		var p = this;
		while(p.bros)	p = p.bros;
		p.bros = new global.RadioButtonLayer(window, parent, storage, is);
		p.bros.head	= head;
		return p.bros;
	}

	function push()
	{
		if(enabled)
		{
			state	= entered ? 4 : 3;
			if(!on)
			{
				on	= true;

				if(typeof owner.onButtonDown != "undefined")
					owner.onButtonDown(this);
			}
		}
	}

	//	ONになっているボタンを得る
	function getOnButton()
	{
		var p = head;
		while(p && !p.on)
			p	= p.bros;
		return p;	//	voidなら、すべてOFF
	}

	property on
	{
		setter(o)
		{
			if(o)
			{
				//	これ以外をoffにする
				var p = head;
				while(p)
				{
					p.on= false if p != this;
					p	= p.bros;
				}
				state	= entered ? 4 : 3;
			}
			else
				state	= entered ? 1 : 0;
			_on	= o;
		}
		getter	{ return _on; }
	}

	//	仲間に入れる
	function associate(btn)
	{
		if(!(btn instanceof "RadioButtonLayer") || btn.head)
			return false;

		var ic = head;
		while(ic.bros != void)
			ic	= ic.bros;
		ic.bros	= btn;	//	一番最後に追加する
		btn.head= head;
		return true;
	}

	//	仲間からはずす
	function shutout(btn)
	{
		//	はずすボタンを探す
		var ic = head, pc = void;
		while(ic != btn && ic != void)
		{
			pc	= ic;
			ic	= ic.bros;
		}
		if(ic == void)
			return false;	//	見つからなかった

		if(pc == void)
		{
			//	はずすボタンが先頭だった
			var ic = head, topbros = head.bros;
			while(ic != void)
			{
				ic.head	= topbros;	//	先頭を、2番目のボタンに変える
				ic	= ic.bros;
			}
		}
		else
		{
			//	はずすボタンが途中だった
			pc.bros	= btn.bros;		//	はずすボタンの兄の弟を、はずすボタンの弟にする
		}
		btn.bros= btn.head = void;	//	連結から完全に切る
		return true;
	}
}

/*-----------------------------------------------------------------------------/
/	スライドボタン
/-----------------------------------------------------------------------------*/
class SlideButtonLayer extends PushButtonLayer
{
	var horizon	= true;
	var min, max;
	var minpos, maxpos;
	var pressed;
	var lastx, lasty;
	var lastpos;

	var previtem, nextitem;

	function SlideButtonLayer(win, par, storage, is)
	{
		super.PushButtonLayer(...);
	}

	function press()
	{
		if(enabled)
		{
			state	= 1;
			pressed	= true;
			lastx	= cursorX;
			lasty	= cursorY;
		}
	}

	function onMouseMove(x, y)
	{
		if(pressed)
		{
			var mx, my, pos;
			if(horizon)
			{
				mx = x - lastx;
				movePos(mx);
				lastx	= x - mx;
			}
			else
			{
				my = y - lasty;
				movePos(my);
				lasty	= y - my;
			}
		}
	}

	//	移動量変更
	function movePos(mv)
	{
		var pos = (horizon ? left : top) + mv;
		pos		= minpos if pos < minpos;
		pos		= maxpos if pos > maxpos;
		this[horizon ? "left" : "top"]	= pos;
		if(lastpos !== pos && typeof owner.updateValue != "undefined")
		{
			owner.updateValue(this, value);
			lastpos	= pos;
		}
	}

	function onMouseUp()
	{
		if(pressed)
		{
			if(enabled)
			{
				state	= entered ? 1 : 0;
				pressed	= false;
			}
		}
	}

	var keyaccel, maxaccel = 20;
	function onKeyDown(key, shift)
	{
		var flag	= !horizon;
		switch(key)
		{
		case VK_LEFT:
//		case VK_PADLEFT:
			flag	= horizon;
		case VK_UP:
//		case VK_PADUP:
			if(flag)
			{
				if(shift & ssRepeat)
					keyaccel-- if keyaccel < maxaccel;
				else
					keyaccel	= -1;
				movePos(keyaccel);
			}
//			else if(previtem)
//				previtem.focus();
			else
				focusPrev();
			return;

		case VK_RIGHT:
//		case VK_PADRIGHT:
			flag	= horizon;
		case VK_DOWN:
//		case VK_PADDOWN:
			if(flag)
			{
				if(shift & ssRepeat)
					keyaccel++ if keyaccel < maxaccel;
				else
					keyaccel	= 1;
				movePos(keyaccel);
			}
//			else if(nextitem)
//				nextitem.focus();
			else
				focusNext();
			return;
		}
		return super.onKeyDown(key, shift, true);
	}

	property value
	{
		setter(v)
		{
			var per = (v - min) / (max - min);
			var pos = (maxpos - minpos) * per + minpos;
			if(horizon)
				left	= pos;
			else
				top		= pos;
		}
		getter
		{
			var pos = (horizon ? left : top) - minpos;
			var per = pos / (maxpos - minpos);
			var v = (max - min) * per + min;
			return int(v + 0.5);
		}
	}
}

@endif
/*-----------------------------------------------------------------------------/
/	End of ButtonLayers.tjs
/-----------------------------------------------------------------------------*/
