/*-----------------------------------------------------------------------------/
/	Copyright (C) TYPE-MOON All Rights Reserved.
/		テキストレイヤーをトランジションでなくopacityでON/OFFさせるプラグイン
/-----------------------------------------------------------------------------*/
if(typeof global.textonoff_object == 'undefined')
{
Scripts.execStorage("subroutine.tjs");

class TextOnOffPlugin extends KAGPlugin
{
	var message_fadetime	= 400;
	var	message_fademode	= "normal";

	var window;

	var layer;
	var tovisible;
	var	msgs;

	var doing;		//	処理実行中か?
	var starttick;	//	開始時刻
	var lastupdatetick;

	function TextOnOffPlugin(window)
	{
		super.KAGPlugin();
		this.window	= window;
	}

	function finalize()
	{
		stop();
		super.finalize(...);
	}

	/*------------------------------------------------------------------------/
	/	処理を行うための初期設定を行う
	/	in	: time	時間
	/		: layer	対象レイヤー(0, 1, all)
	/		: vis	表示/非表示
	/	out	: 
	/------------------------------------------------------------------------*/
	function init(time, layer, vis)
	{
		//	初期準備/設定
		tovisible	= vis;
		this.time	= time = time!==void ? +time : message_fadetime;
		this.layer	= layer;
		msgs = window.fore.messages;
		if(layer == "all")
		{
			for(var i=0; i<msgs.count; i++)
			{
//				msgs[i].visible			= vis;
				msgs[i]["start_opacity"]= (tovisible ? (msgs[i].opacity < 255 ? msgs[i].opacity : 0) : (msgs[i].opacity > 0 ? msgs[i].opacity : 255));
			}
		}
		else
		{
//			msgs[+layer].visible			= vis;
			msgs[+layer]["start_opacity"]	= (tovisible ? (msgs[+layer].opacity < 255 ? msgs[+layer].opacity : 0) : (msgs[+layer].opacity > 0 ? msgs[+layer].opacity : 255));
		}

		//	処理開始
		doing	= true;
		if(time<1)
			finish();
		else
		{
			starttick	= System.getTickCount();
			System.addContinuousHandler(handler);
		}
	}

	/*------------------------------------------------------------------------/
	/	毎度毎度の処理(指定時刻における状態の再現)
	/	in	: tick	時刻
	/	out	: 
	/------------------------------------------------------------------------*/
	function handler(tick)
	{
		//	最小更新間隔より短い場合、処理を行わない
		if(tick-lastupdatetick<minInterval)
			return;
		lastupdatetick	= tick;

		var past = tick - starttick;	//	経過した時間
//		dm(@"tick = ${tick} / starttick = ${starttick} / past = ${past}");

		//	進行度を測る
		if(past>time)
			finish();	//	終了の時刻を過ぎているので、最終状態にする
		else
		{
			//	時間があるので、現在の進行度に対応した状態を再現
			var	per	= past / time;
//			dm("basic per = "+per+" / to visible = "+tovisible);
			if(message_fademode == "fast")
			{//	高速モード
				;	//	特になし
			}
			else
			{//	通常モード
				if(tovisible)
				{
					if(per < 0.5)
						per	= 0.0;
					else
						per	= (per - 0.5) * 2;
				}
				else
				{
					if(per < 0.5)
						per	*= 2;
					else
						per	= 1.0;
				}
			}
			construct(per);			//	状態の再現
		}
	}

	/*------------------------------------------------------------------------/
	/	指定進行度における状態の再現
	/	in	: per	進行度
	/	out	: 
	/------------------------------------------------------------------------*/
	function construct(per)
	{
		//	進行度に対応した状態の再現
		var opacity;
		var wb		= window.currentWithBack;
		if(tovisible)
		{
			if(layer == "all")
			{
				for(var i=0; i<msgs.count; i++)
				{
					with(msgs[i])
					{
						.opacity = int(per * (255 - .start_opacity)) + .start_opacity, .visible = true;
//	dm("***** "+per+": kag.fore.messages["+i+"].opacity = "+.opacity);
						if(wb)
						{
							.comp.opacity	= .opacity;
							.comp.visible	= true;
						}
					}
				}
			}
			else
			{
				with(msgs[+layer])
				{
					.opacity = int(per * (255 - .start_opacity)) + .start_opacity, .visible = true;
//dm("***** "+per+": kag.fore.messages[+layer="+layer+"].opacity = "+.opacity);
					if(wb)
					{
						.comp.opacity	= .opacity;
						.comp.visible	= true;
					}
				}
			}
		}
		else
		{
			if(layer == "all")
			{
				for(var i=0; i<msgs.count; i++)
					with(msgs[i])
					{
						.opacity = .start_opacity - int(per * .start_opacity);
//	dm("***** "+per+": kag.fore.messages["+i+"].opacity = "+.opacity);
						if(wb)
						{
							.comp.opacity	= .opacity;
							.comp.visible	= true;
						}
					}
			}
			else
			{
				with(msgs[+layer])
				{
					.opacity = .start_opacity - int(per * .start_opacity);
//	dm("***** "+per+": kag.fore.messages[+layer="+layer+"].opacity = "+.opacity);
					if(wb)
					{
						.comp.opacity	= .opacity;
						.comp.visible	= true;
					}
				}
			}
		}
	}

	/*------------------------------------------------------------------------/
	/	最終状態へ移行
	/	in	: 
	/	out	: 
	/------------------------------------------------------------------------*/
	function finish()
	{
		construct(1.0);	//	最終状態にする
		stop();			//	処理を停止する
	}

	/*------------------------------------------------------------------------/
	/	処理を停止する
	/	in	: 
	/	out	: 
	/------------------------------------------------------------------------*/
	function stop()
	{
		if(doing)
		{
			window.trigger("textonoff");
			System.removeContinuousHandler(handler);
			doing	= false;

			var wb	= window.currentWithBack;
			if(layer == "all")
			{
				for(var i=0; i<window.fore.messages.count; i++)
				{
					window.fore.messages[i].visible	= tovisible;
					window.back.messages[i].visible	= tovisible if wb;
//					dm("window.fore.messages["+i+"].visible = "+window.fore.messages[i].visible);
				}
			}
			else
			{
				window.fore.messages[+layer].visible	= tovisible;
				window.back.messages[+layer].visible	= tovisible if wb;
//				dm("window.fore.messages["+int(layer)+"].visible = "+window.fore.messages[+layer].visible);
			}
		}
	}

	function onStore(f, elm)
	{
		// 栞を保存する際に呼ばれる
		// f = 保存先の栞データ ( Dictionary クラスのオブジェクト )
		// elm = tempsave 時のオプション ( 現在は常に void )
	}

	function onRestore(f, clear, elm)
	{
		// 栞を読み出すときに呼ばれる
		// f = 読み込む栞データ ( Dictionary クラスのオブジェクト )
		// clear = メッセージレイヤをクリアするか ( tempload の時のみ false )
		// elm = tempload 時のオプション ( tempload でない場合は 常に void,
		//                                 tempload の時は Dictionary クラスのオブジェクト )
		stop();
	}
}
// プラグインオブジェクトを作成し、登録する
kag.addPlugin(global.textonoff_object = new TextOnOffPlugin(kag));

//	タグを登録する
kag.tagHandlers.texton = function(mp)
{
	dm("text on: visible="+fore.messages[0].visible+", opacity="+fore.messages[0].opacity);
	//	対象のメッセージレイヤー(default:current)
	var layer = mp.layer !== void ? mp.layer : (string currentNum);

	//	対象のメッセージレイヤーの状態
	var vis	= false;
	var opac;
	if(layer == "all")
	{
		opac	= 255;
		for(var i=0; i<fore.messages.count; i++)
		{
			vis	|= fore.messages[i].visible;
			opac = fore.messages[i].opacity if fore.messages[i].opacity < opac;
		}
	}
	else
	{
		vis	= fore.messages[+layer].visible;
		opac= fore.messages[+layer].opacity;
	}
//	dm("opacity = "+opac);

	//	非表示状態かつメッセージ表示が抑制されてないとき
	if((!vis || opac < 255) && !.f.message_off)
	{
		mp.time	= 0 if .sf.effectSkip || skipMode >= 2;
		.textonoff_object.init(mp.time, layer, true);
		mp.name		= "textonoff";
		mp.onskip	= ".textonoff_object.finish()";

//		dm("text on("+current.visible+", "+mp.time+")");
		if(.textonoff_object.doing)
			return tagHandlers.waittrig(mp);
	}
	return 0;
} incontextof kag;
kag.tagHandlers.textoff = function(mp)
{
//	dm("text off: visible="+fore.messages[0].visible+", opacity="+fore.messages[0].opacity+"("+Scripts.getTraceString()+")");
//	dm(Scripts.getTraceString());
	//	対象のメッセージレイヤー(default:all)
	var layer = mp.layer !== void ? mp.layer : "all";

	//	対象のメッセージレイヤーの状態
	var vis	= false;
	var opac;
	if(layer == "all")
	{
		opac	= 0;
		for(var i=0; i<fore.messages.count; i++)
		{
			vis	|= fore.messages[i].visible;
			opac = fore.messages[i].opacity if fore.messages[i].opacity > opac;
		}
	}
	else
	{
		vis	= fore.messages[+layer].visible;
		opac= fore.messages[+layer].opacity;
	}

	//	表示状態かつメッセージ常駐でないとき
	if(vis)
	{
		if(opac > 0 && !.f.staymessage)
		{
			mp.time	= 0 if .sf.effectSkip || skipMode >= 2;
			.textonoff_object.init(mp.time, layer, false);
			mp.name		= "textonoff";
			mp.onskip	= ".textonoff_object.finish()";

//			dm("text off("+current.visible+", "+mp.time+")");
			if(.textonoff_object.doing)
				return tagHandlers.waittrig(mp);
		}
		else if(layer == "all")
		{
			for(var i=0; i<fore.messages.count; i++)
				fore.messages[i].visible	= false;
		}
		else
			fore.messages[+layer].visible	= false;
	}

	return 0;
} incontextof kag;

//	テキストONOFFの時間/モード切替
kag.tagHandlers.settextonoff	= function(elm)
{
	with(elm)
	{
		textonoff_object.message_fadetime	= .time !== void ? +.time : 400;
		textonoff_object.message_fademode	= .mode != void ? .mode : "normal";
	}
	return 0;
} incontextof kag;

}
