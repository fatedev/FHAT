/*-----------------------------------------------------------------------------/
/	Copyright (C) 2004 TYPE-MOON All Rights Reserved.
/		花札ゲーム用のメニューレイヤー
/-----------------------------------------------------------------------------*/
@if(__HF_MENULAYER_DEFINED__==0)
@set(__HF_MENULAYER_DEFINED__=1)
Scripts.execStorage("subroutine.tjs");
Scripts.execStorage("HFButtonLayers.tjs");

class BaseMenuLayer extends ChipLayer
{
	var fadetime	= 300;
	var	enterse		= "hfse008.wav";
	var	clickse		= "hfse011.wav";

	var showed;
	var buttons;
	var lastfocus;
	var acceptable;

	function BaseMenuLayer(win, par)
	{
		super.ChipLayer(...);
		hitThreshold= 0;
		lastfocus	= void;
		absolute	= 2000000;
	}

	function finalize()
	{
		releaseDictionary(buttons);
		super.finalize(...);
	}

	//	メニュー作成
	function initMenu()
	{
	}

	function show(time=fadetime, accel=0, delay=0)
	{
		if(showed)
			return;
		showed	= acceptable = true;
		setMode();

		lastfocus	= void;
		var focusbutton	= initMenu();

		//	表示開始
		stop("move");
		opacity	= 1;
		visible	= true;
		moveTo(,, 255, time, accel, delay);
		hfSound.メニュー出現 = true;	//	メニュー出現音再生

		window.focusedLayer	= focusbutton if focusbutton != void;
	}

	function hide(time=fadetime, accel=0, delay=0)
	{
		if(!showed)
			return;
		showed	= acceptable = false;
		removeMode();

		stop("move");
		enabled	= false;
		moveTo(,, 0, time, accel, delay, finish_hide);
		hfSound.決定 = true;	//	メニュー消去(=決定)音再生
		return time;
	}

	function finish_hide()
	{
		visible	= false;
		setImageSize(1,1);
		releaseDictionary(buttons);
	}

	property enabled
	{
		setter(e)
		{
			if(e !== enabled)
			{
				if(e)
				{
					lastfocus.focusable	= true;
					window.focusedLayer	= lastfocus;
					lastfocus	= void;
				}
				else
				{
					lastfocus	= window.focusedLayer;
				}

				if(buttons)
				{
					var keys = [];
					keys.assign(buttons);
					for(var i=0; i<keys.count; i+=2)
						keys[i+1].focusable	= e;
				}
			}
		}
		getter	{ return lastfocus == void; }	//	フォーカスを持っていたレイヤーを保存しているかどうかで有効/無効を分ける
	}
}

//-----------------------------------------------------------------------------
//	花札設定メニュー
class HahafudaConfigMenuLayer extends BaseMenuLayer
{
	var mode;	//	"title", "game", "mainpart"
	var chktimer;

	function HahafudaConfigMenuLayer(win, par, mode="game")
	{
		super.BaseMenuLayer(...);
		this.mode	= mode;
	}

	function finalize()
	{
		release(chktimer);
		super.finalize(...);
	}

	//	メニュー作成
	function initMenu()
	{
		var layer;
		var l, t;
		with(layer = new global.Layer(window, this))
		{
			.loadImages("hf_設定_背景");
			.setSizeToImageSize();
			setSize(parent.width, parent.height);
			l = (width - .width) >> 1, t = (height - .height) >> 1;
			copyRect(l, t, layer, 0, 0, .width, .height);
			var bgc = 0x00000000;
			fillRect(0, 0, width, t, bgc);
			fillRect(0, t, l, height - t, bgc);
			fillRect(l+.width, t, l, height - t, bgc);
			fillRect(l, t + .height, .width, t, bgc);
		}
		release(layer);

		buttons	= %[];
		var btn, prev;

		//	スライダー
		var sbs	= [
			[ "sevol",	"ボリュームカーソル",	39, 169, 354, "seVolume" ],
			[ "bgmvol",	"ボリュームカーソル",	93, 169, 354, "bgmVolume" ],
			[ "allvol",	"ボリュームカーソル",	147, 169, 354,"globalVolume" ]
		];
		for(var i=0; i<sbs.count; i++)
		{
			var sb = sbs[i];
			with(btn = new SlideButtonLayer(window, this, "hf_設定_"+sb[1], 2))
			{
				.name	= sb[0];
				.setPos(l+sb[2], t+sb[3]);
				.visible= true;
				.horizon= false;
				.minpos	= t + sb[3];
				.maxpos	= t + sb[4];
				.min	= 100;
				.max	= 0;
				.value	= sf[sb[5]];
				.enterse	= enterse;
			}
			buttons[sb[0]]	= btn;
		}

		//	ラジオボタン
		var rbs = [
			[
				parent.popup,
				[ "popupon",	"ありボタン",	229, 105,	true ],
				[ "popupoff",	"なしボタン",	232, 247,	false ]
			], [
				parent.chat,
				[ "chaton",		"ありボタン",	322, 105,	true ],
				[ "chatoff",	"なしボタン",	325, 247,	false ]
			], [
				window.fullScreen,
				[ "fullscreen",	"フルスクリーンボタン",	414, 92,	true ],
				[ "window",		"ウィンドウボタン",		415, 262,	false ]
			]
		];
		for(var i=0; i<rbs.count; i++)
		{
			btn	= void;
			for(var j=1; j<rbs[i].count; j++)
			{
				var rb	= rbs[i][j];
				var b;
				if(btn)
					b = btn.addButtonToGroup("hf_設定_"+rb[1], 6);
				else
					b = btn = new RadioButtonLayer(window, this, "hf_設定_"+rb[1], 6);
				with(b)
				{
					.name		= rb[0];
					.setPos(l+rb[2], t+rb[3]);
					.visible	= true;
					.enterse	= enterse;
					.on			= (rbs[i][0] == rb[4]);
				}
				buttons[rb[0]]	= b;
			}
		}

		//	通常のボタン
		var pbs = [
			[ "yakulist",	"役一覧ボタン",	505, 50 ],
			[ "fudalist",	"札一覧ボタン",	505, 194 ],
			[ "treasurelist","宝具詳細ボタン",508, 333 ],
			[ "gotitle",	"タイトルへ戻るボタン",	263, 417 ],
			[ "resume",		"ゲーム再開ボタン",	444, 417 ]
		];
		if(mode == "title")
		{
			pbs[4][1]	= "閉じるボタン";	//	「ゲーム再開」は「閉じる」へ変更
			pbs.erase(3);	//	「タイトルへ戻る」ボタンは不要
		}
		else if(mode == "mainpart")
		{
			pbs.erase(3);	//	タイトルへ戻るボタンは不要
			pbs.erase(2);	//	宝具詳細ボタンは不要
		}
		for(var i=0; i<pbs.count; i++)
		{
			var pb = pbs[i];
			with(btn = new PushButtonLayer(window, this, "hf_設定_"+pb[1]))
			{
				.name	= pb[0];
				.setPos(l+pb[2], t+pb[3]);
				.enterse	= enterse;
				.visible	= true;
			}
			buttons[pb[0]]	= btn;
		}

		//	状態チェックタイマー開始
		with(chktimer = new Timer(onCheck, ""))
			.interval = 100, .enabled = true;	//	この間隔で、状態をチェックする

		return buttons["resume"];	//	フォーカスを当てるボタン
	}

	function onMouseDown(x, y, button, shift)
	{
		if(!acceptable)
			return;

		if(button == mbRight)
		{
			parent.hideMenu();
			invalidate chktimer;	//	状態チェックタイマー終了
			chktimer	= void;
		}
	}

	function onButtonDown(btn)
	{
		if(!acceptable)
			return;

		playSound(clickse);
		switch(btn.name)
		{
		case "yakulist":
			parent.showYakuReference();
			break;
		case "fudalist":
			parent.showFudaReference();
			break;
		case "treasurelist":
			parent.showTreasureList();
			break;
		case "gotitle":
			window.askYesNo2("ゲームの途中ですが、タイトルへ戻ってもよろしいですか？", gotitle);
			break;
		case "resume":
			parent.hideMenu();
			invalidate chktimer;	//	状態チェックタイマー終了
			chktimer	= void;
			break;
		case "fullscreen":
			window.onFullScreenMenuItemClick();
//			window.fullScreen	= true;
			break;
		case "window":
			if(window.fullScreen)
			{
//				window.fullScreen	= false;
				window.onWindowedMenuItemClick();

				//	マウスが画面外にいたら、Leaveにする
				var w = window.scWidth, h = window.scHeight;
				var x = cursorX, y = cursorY;
				if(x < 0 || x >= w || y < 0 || y >= h)
					btn.onMouseLeave();
			}
			break;
		case "chaton":
			parent.chat	= true;
			break;
		case "chatoff":
			parent.chat	= false;
			break;
		case "popupon":
			parent.popup	= true;
			break;
		case "popupoff":
			parent.popup	= false;
			break;
		}
	}

	function updateValue(btn, value)
	{
		dm(btn.name+".value = "+value);
		switch(btn.name)
		{
		case "allvol":
			kag.setUserVolume(value);
			break;
		case "bgmvol":
			kag.setUserVolume(,value);
			break;
		case "sevol":
			kag.setUserVolume(,, value);
			break;
		}
	}

	function gotitle(result)
	{
		if(result)
		{
			parent.gotitle();
			acceptable	= false;
		}
	}

	function onCheck()
	{
//		dm("on check");
		//	現在の状態とボタンが異なっていれば、現状に沿わせる
		if(window.fullScreen)
			buttons["fullscreen"].on	= true if !buttons["fullscreen"].on;
		else
			buttons["window"].on		= true if !buttons["window"].on;
	}

	property enabled
	{
		setter(e)
		{
			super.enabled	= e;
			if(chktimer)
				chktimer.enabled	= e;
		}
		getter	{ return super.enabled; }
	}
}

//-----------------------------------------------------------------------------
//	札・役一覧表示レイヤー
class HanafudaReferenceLayer extends BaseMenuLayer
{
	var storages	= [ "hf_役一覧", "hf_札一覧" ];
	var radiobuttons	= [
		[ "yaku", "hf_役一覧ボタン", 707, 112 ],
		[ "fuda", "hf_札一覧ボタン", 707, 284 ]
	];
	var pushbuttons	= [
		[ "back", "hf_一覧戻るボタン", 707, 507 ]
	];

	var curmode;

	function HanafudaReferenceLayer(win, par)
	{
		super.BaseMenuLayer(...);
		absolute	+= 1;	//	設定メニューより前に位置させる
	}

	//	メニュー作成
	function initMenu()
	{
		//	準備
		loadImages(storages[curmode]);
		setSizeToImageSize();

		buttons	= %[];
		var rbs = radiobuttons;
		var btn;
		for(var i=0; i<rbs.count; i++)
		{
			var rb = rbs[i], b;
			if(i)
				b = btn.addButtonToGroup(rb[1], 6);
			else
				b = btn = new RadioButtonLayer(window, this, rb[1], 6);
			with(b)
			{
				.name		= rb[0];
				.setPos(rb[2], rb[3]);
				.visible	= true;
				.enterse	= enterse;
				.on			= true if i == curmode;
			}
			buttons[rb[0]]	= b;
		}

		var pbs = pushbuttons;
		for(var i=0; i<pbs.count; i++)
		{
			var pb = pbs[i];
			with(btn = new PushButtonLayer(window, this, pb[1]))
			{
				.name	= pb[0];
				.setPos(pb[2], pb[3]);
				.enterse	= enterse;
				.visible	= true;
			}
			buttons[pb[0]]	= btn;
		}

		return buttons["back"];
	}

	function showYaku()	{	curmode	= 0;	show();	}
	function showFuda()	{	curmode	= 1;	show();	}

	function change(mode)
	{
		if(curmode == mode)	return;

		loadImages(storages[mode]);
		curmode	= mode;
	}

	function onMouseDown(x, y, button, shift)
	{
		if(!acceptable)
			return;

		if(button == mbRight)
			parent.hideReference();
	}

	function onButtonDown(btn)
	{
		if(!acceptable)
			return;

		playSound(clickse);
		switch(btn.name)
		{
		case "yaku":
			change(0);
			break;
		case "fuda":
			change(1);
			break;
		case "back":
			parent.hideReference();
			acceptable	= false;
			break;
		}
	}
}

//-----------------------------------------------------------------------------
//	花札ルールメニュー
class HanafudaRuleMenuLayer extends BaseMenuLayer
{
	var btnimages	= [ "hf_ruleなし", "hf_ruleあり" ];
	var btndata	= [
		[ "sake.on",	682, 368,	"酒あり",		true ],
		[ "sake.off",	682, 465,	"酒あり",		false ],
		[ "ame.on",		594, 368,	"雨流れあり",	true ],
		[ "ame.off",	594, 465,	"雨流れあり",	false ],
		[ "asikou.on",	506, 368,	"雨四光あり",	true ],
		[ "asikou.off",	506, 465,	"雨四光あり",	false ],
		[ "koikoi.on",	418, 368,	"倍返しあり",	true ],
		[ "koikoi.off",	418, 465,	"倍返しあり",	false ],
		[ "double7.on",	330, 368,	"７文倍掛けあり",	true ],
		[ "double7.off",330, 465,	"７文倍掛けあり",	false ],
		[ "dual.on",	242, 368,	"二役あり",	true ],
		[ "dual.off",	242, 465,	"二役あり",	false ],
		[ "sp.on",		154, 368,	"宝具あり",	true ],
		[ "sp.off",		154, 465,	"宝具あり",	false ],
		[ "mpx2.on",	 66, 368,	"修羅モード",	true ],
		[ "mpx2.off",	 66, 465,	"修羅モード",	false ]
	];
	var rulestorage	= "../koikoirules.cfg";
	var tfkey	= "花札ルール-";

	var ruleflags;

	function HanafudaRuleMenuLayer(win, par)
	{
		name	= "ルール設定メニュー";
		super.BaseMenuLayer(...);
		hitThreshold	= 0;
	}

	function initMenu()
	{
		//	現在の設定を読み込む
		if(typeof .kag != "undefined")
		{
			ruleflags	= %[];
			var keys;
			(keys = []).assign(tf);
			for(var i=0; i<keys.count; i+=2)
			{
				if(keys[i].substr(0, tfkey.length) == tfkey)
				{
					var key = keys[i].substr(tfkey.length);
					ruleflags[key] = tf[keys[i]];
//					dm("ルール: "+key+" = "+ruleflags[key]);
				}
			}
		}
		else
		{
			if(Storages.isExistentStorage(rulestorage))
				ruleflags	= Scripts.evalStorage(rulestorage);
			ruleflags	= %[] if ruleflags == void;
		}

		//	背景
		loadImages("hf_rule背景");
		setSizeToImageSize();
		setPos(0, 0);

		//	ボタン作成
		buttons	= %[];
		for(var i=0; i<btndata.count; i+=2)
		{
			var b = btndata[i], btn;
			//	未設定のルールはデフォルト値を入れる
//			dm("ルール: "+b[3]+" = "+ruleflags[b[3]]);
			ruleflags[b[3]]	= defaultKoikoiRules[b[3]] if ruleflags[b[3]] === void;

			with(btn = new HanafudaRuleButtonLayer(window, this, btnimages[b[4]], 6))
			{
				.name	+= "("+b[0]+")";
				.setPos(b[1], b[2]);
				.no	= i;
				.on	= ruleflags[b[3]] == b[4] ? true : false;
				.enterse	= enterse;
				.visible	= true;
			}
			buttons[b[0]]	= btn;

			b	= btndata[i+1];
			with(btn = btn.addButtonToGroup(btnimages[b[4]], 6))
			{
				.name	+= "("+b[0]+")";
				.setPos(b[1], b[2]);
				.no	= i + 1;
				.on	= ruleflags[b[3]] == b[4] ? true : false;
				.enterse	= enterse;
				.visible	= true;
			}
			buttons[b[0]]	= btn;
		}

		//	キー入力時のフォーカス変更補正
		for(var i=0; i<btndata.count; i++)
		{
			var	l = i + 2, r = i - 2;
			l	-= btndata.count if l >= btndata.count;
			r	+= btndata.count if r < 0;
			with(buttons[btndata[i][0]])
			{
				.leftbutton		= buttons[btndata[l][0]];
				.rightbutton	= buttons[btndata[r][0]];
//				dm(btndata[i][0]+": left = "+buttons[btndata[l][0]].name+" / right = "+buttons[btndata[r][0]].name);
			}
		}

		//	酒がなしなら、雨流れを無効状態にする
		if(!ruleflags["酒あり"])
			buttons["ame.on"].enabled = buttons["ame.off"].enabled = false;

		//	宝具なしなら、修羅モードを無効状態にする
		if(!ruleflags["宝具あり"])
			buttons["mpx2.on"].enabled = buttons["mpx2.off"].enabled = false;

		return void;
	}

	function onMouseDown(x, y, button, shift)
	{
		if(button == mbRight)
		{
			//	ルールを保存
			if(typeof .kag != "undefined")
			{
				var keys = [];
				keys.assign(ruleflags);
				for(var i=0; i<keys.count; i+=2)
					tf[tfkey+keys[i]]	= ruleflags[keys[i]];
//				dm("ルール: "+tfkey+keys[i]+" = "+tf[tfkey+keys[i]]);
			}
			else
				(Dictionary.saveStruct incontextof ruleflags)(rulestorage);

			hide();
		}
	}

	function onButtonDown(btn)
	{
		if(!showed)
			return;

		playSound(clickse);
		var b = btndata[btn.no];

		ruleflags[b[3]]	= b[4];
		dm("ruleflags["+b[3]+"] = "+ruleflags[b[3]]);

		//	酒を変更したら、雨流れが有効/無効に変化する
		if(b[3] == "酒あり")
		{
			buttons["ame.on"].enabled = buttons["ame.off"].enabled = b[4];
			if(b[4])
				buttons["ame."+(ruleflags["雨流れあり"] ? "on" : "off")].on	= true;
		}

		//	宝具を変更したら、修羅モードが有効/無効に変化する
		if(b[3] == "宝具あり")
		{
			buttons["mpx2.on"].enabled = buttons["mpx2.off"].enabled = b[4];
			if(b[4])
				buttons["mpx2."+(ruleflags["修羅モード"] ? "on" : "off")].on	= true;
		}
	}
}

class HanafudaRuleButtonLayer extends RadioButtonLayer
{
	var leftbutton, rightbutton;

	function HanafudaRuleButtonLayer()
	{
		super.RadioButtonLayer(...);
	}

	//	グループにボタンを追加
	function addButtonToGroup(storage, is=imagesept)
	{
		var p = this;
		while(p.bros)	p = p.bros;
		p.bros = new global.HanafudaRuleButtonLayer(window, parent, storage, is);
		p.bros.head	= head;
		return p.bros;
	}

	function onKeyDown(key, shift)
	{
		if(key == VK_LEFT)
			leftbutton.focus() if leftbutton != void;
		else if(key == VK_RIGHT)
			rightbutton.focus() if rightbutton != void;
		else
			return super.onKeyDown(key, shift, true);
	}

	function onMouseLeave()
	{
		super.onMouseLeave(...);
		window.focusedLayer	= void;
	}
}

//-----------------------------------------------------------------------------
//	宝具一覧メニュー
class HanafudaTreasureMenuLayer extends BaseMenuLayer
{
	var	curvewidth	= 12;
	var	facepos	= %[left:24,top:61,step:149,width:146,height:136];
	var	infopos	= %[left:177,top:61,step:149,width:559,height:136];
	var	iconpos	= %[left:90,top:502,step:58];
	var	baseleft, basetop;
	var	teams	= [ 1, 2, 3, 4, 5, 6, 0, 7 ];
	var	clickse2	= "hfse006.wav";

	var	buttons;
	var	disp	= [];	//	表示中の宝具
	var	images;

	function HanafudaTreasureMenuLayer(win, par)
	{
		super.BaseMenuLayer(...);
		absolute	+= 1;	//	設定メニューより前に位置させる
	}

	function finalize()
	{
		releaseDictionary(buttons);
		super.finalize(...);
	}

	function initMenu()
	{
		//	背景準備
		var layer, l, t;
		with(layer = new global.Layer(window, this))
		{
			.loadImages("hf_td背景");
			.setSizeToImageSize();

			//	リセット用の画像を取得
			var cutpos	= [
				[ facepos.left, curvewidth ],
				[ facepos.left + curvewidth, 1 ],
				[ facepos.left + facepos.width - curvewidth, curvewidth ]
			];
			images	= [];
			for(var i=0; i<cutpos.count; i++)
			{
				var cut	= cutpos[i];
				with(images[i] = new global.Layer(window, this))
				{
					.setSize(cut[1], facepos.height);
					.copyRect(0, 0, layer, cut[0], facepos.top, .width, .height);
				}
			}

			setSize(parent.width, parent.height);
			l = (width - .width) >> 1, t = (height - .height) >> 1;
			copyRect(l, t, layer, 0, 0, .width, .height);
			var bgc = 0x00000000;
			fillRect(0, 0, width, t, bgc);
			fillRect(0, t, l, height - t, bgc);
			fillRect(l+.width, t, l, height - t, bgc);
			fillRect(l, t + .height, .width, t, bgc);
			baseleft	= l;
			basetop		= t;
		}
		release(layer);

		//	チーム切替のラディオボタン
		buttons	= %[];
		var	btns, l = baseleft + iconpos.left, t = basetop + iconpos.top;
		for(var i=0; i<teams.count; i++)
		{
			var	btn, name = hfTeamName[teams[i]];
			if(btns)
				btn	= btns.addButtonToGroup("hf_td-icon"+name);
			else
				btn	= btns = new global.RadioButtonLayer(window, this, "hf_td-icon"+name, 6);
			with(btn)
			{
				.name	= name;
				.no		= teams[i];
				.setPos(l, t);
				.hint	= hfFormalTeamName[teams[i]];
				.enterse	= enterse;
				.visible	= true;
			}
			buttons[name]	= btn;
			l	+= iconpos.step;
		}

		//	閉じるボタン
		with(buttons["exit"] = new PushButtonLayer(window, this, "hf_設定_閉じるボタン"))
		{
			.name	= "exit";
			.setPos(baseleft+603, basetop+507);
			.visible	= true;
		}

		//	初期表示(自チーム)
		var	btn;
		btn	= buttons[hfTeamName[parent.team[1]]] if typeof parent.team != 'undefined';
		btn	= buttons[hfTeamName[0]] if btn == void;
		btn.push();

//		drawTreasure(parent.team[1]);

		return buttons["exit"];
	}

	//	チームごとの宝具説明を描画
	function drawTreasure(teamno)
	{
		var list	= parent.game.getTeamTreasure(teamno);	//	宝具一覧を表示
		var flag	= global.tf.hanafuda_usedTreasure;		//	宝具使用回数
		flag	= %[] if flag == void;

		//	藤ねえ・ブルマチームなら、無条件で「無限の道場」を追加
		if(teamno == 0)
		{
			var treasure	= "無限の道場";
			list.add(["藤ねえ", treasure]);
			flag[treasure]	= 0;
		}

		var layer;
		var	fl	= baseleft+facepos.left, ft = basetop+facepos.top, fw = facepos.width;
		var	dl	= baseleft+infopos.left, dt = basetop+infopos.top, dw = infopos.width;
		var	cw	= curvewidth, ch = images[0].height;
		for(var i=0; i<3; i++)
		{
			var servant, treasure;
			if(list[i] != void)
			{
				servant	= list[i][0];
				treasure= list[i][1];
				treasure	= "" if flag[treasure] === void;
			}

			if(treasure != "")
			{//	フェイスと宝具説明を描画
				layer	= new global.Layer(window, this) if layer == void;
				with(layer)
				{
					.loadImages("hf_td-face"+servant);
					operateRect(fl, ft, layer, 0, 0, .imageWidth, .imageHeight, omAlpha, 255);
					.loadImages("hf_td-treasure"+treasure);
					operateRect(dl, dt, layer, 0, 0, .imageWidth, .imageHeight, omAlpha, 255);
				}
			}
			else if(disp[i] != "")
			{//	消去
				copyRect(fl, ft, images[0], 0, 0, cw, ch);
				copyRect(dl, dt, images[0], 0, 0, cw, ch);
				operateStretch(fl+cw, ft, fw-(cw<<1), ch, images[1], 0, 0, 1, ch, omOpaque, 255, stNearest);
				operateStretch(dl+cw, ft, dw-(cw<<1), ch, images[1], 0, 0, 1, ch, omOpaque, 255, stNearest);
				copyRect(fl+fw-cw, ft, images[2], 0, 0, cw, ch);
				copyRect(dl+dw-cw, ft, images[2], 0, 0, cw, ch);
			}

			disp[i]	= treasure;	//	表示中の宝具名を記録
			ft	+= facepos.step;
			dt	+= infopos.step;
		}
		release(layer);
	}

	function finish_hide()
	{
		super.finish_hide(...);
		releaseArray(images);
	}

	function onMouseDown(x, y, button, shift)
	{
		if(!acceptable)
			return;

		if(button == mbRight)
			parent.hideTreasureList();
	}

	function onButtonDown(btn)
	{
		if(!acceptable)
			return;

		if(btn.name == "exit")
		{//	閉じるボタン
			playSound(clickse);
			parent.hideTreasureList();
		}
		else
		{//	チーム切替ボタン
			playSound(clickse2);
			drawTreasure(btn.no);
		}
	}
}

@endif
/*-----------------------------------------------------------------------------/
/	End of MenuLayer.tjs
/-----------------------------------------------------------------------------*/
