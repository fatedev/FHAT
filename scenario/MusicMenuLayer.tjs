/*-----------------------------------------------------------------------------
/	Copyright (C) TYPE-MOON All Rights Reserved.
/		サウンドテストメニュー
/----------------------------------------------------------------------------*/
@if(__MUSICMENULAYER_DEFINED__==0)
@set(__MUSICMENULAYER_DEFINED__=1)

Scripts.execStorage("ExtendMenuLayer.tjs");
Scripts.execStorage("subroutine.tjs");
Scripts.execStorage("MusicListLayer.tjs");
Scripts.execStorage("MenuTitleLayer.tjs");
Scripts.execStorage("MenuBackButtonLayer.tjs");
Scripts.execStorage("SliderLayer.tjs");

var MusicListFile	= "音楽一覧.txt";		//	"ファイル名\t一行目\t二行目\n"
var SEListFile		= "効果音一覧.txt";

class MusicMenuLayer extends ExtendMenuLayer
{
	var mbuttondata	= [
		[ 3, "music_rew",	"巻戻りボタン",		"前のBGMへ移動します。",  97, 432 ],
		[ 1, "music_play",	"再生停止ボタン",	"BGMを再生/停止します。",175, 432 ],
		[ 3, "music_fwd",	"早送りボタン",		"次のBGMへ移動します。", 253, 432 ],
	];
	var sbuttons;
	var sbuttondata	= [
		[ 3, "se_rew",		"巻戻りボタン",		"前のSEへ移動します。",  539, 432 ],
		[ 1, "se_play",		"再生停止ボタン",	"SEを再生/停止します。", 617, 432 ],
		[ 3, "se_fwd",		"早送りボタン",		"次のSEへ移動します。",  695, 432 ],
	];
	var repeatbuttons;
	var repeatdata = [
		[ 2, "music_repeat","一曲リピート",		"MODE[BGMをリピート再生]にします。",    374, 432 ],
		[ 2, "music_allrep","全曲リピート",		"MODE[BGM全曲をリピート再生]にします。",414, 432 ],
	];
	var enterse	= "";
	var clickse	= "";

	var back;

	var music;
	var musicfiles;
	var musiclist;
	var musicvolume;

	var sefiles;
	var selist;
	var sevolume;

	var playmode;
	var bgm_playno;
	var se_playno;

	var scflags;

	var mbuttons;
	var showed, acceptable;

	var return_storage, return_label;

	var defaulttime	= 400;

	function MusicMenuLayer(win, par)
	{
		super.ExtendMenuLayer(...);
		name	= "音楽レイヤー";
		scflags	= win.scflags;

		loadImages("music_bg");
		setSizeToImageSize();
		setPos(0, 0);

		//	タイトル描画
		var layer = new global.Layer(win, this);
		with(layer)
		{
			.loadImages("music_title");
			operateRect(38, 16, layer, 0, 0, .imageWidth, .imageHeight, omAlpha);
			.loadImages("bar");
			operateRect(250, 36, layer, 0, 0, .imageWidth, .imageHeight, omAlpha);
		}
		invalidate layer;

		//	ファイルリスト取得
		musicfiles	= loadFiles(MusicListFile, tf.playedMusic);
		sefiles		= loadFiles(SEListFile, tf.playedSE);

		//	音声再生バッファ
		music		= new global.WaveSoundBuffer(this);

		with(musiclist = new global.MusicListLayer(win, this, musicfiles, 20, 104, 437, 320, 461))
		{
			.onclick	= this.changeBGM;
			.septcolor	= rgba(196,74,139,128);
		}
		mbuttons		= createButtons(win, this, mbuttondata);
		mbuttons.setAll("entersound", enterse) if enterse != "";
//		repeatbuttons	= createButtons(win, this, repeatdata);
//		repeatbuttons.setAll("entersound", enterse) if enterse != "";
		playmode	= "repeat";
//		repeatbuttons.get("music_repeat").on();

		with(selist = new global.MusicListLayer(win, this, sefiles, 524, 104, 256, 320, 506))
		{
			.onclick	= this.changeSE;
			.septcolor	= rgba(196,74,139,128);
		}
		sbuttons		= createButtons(win, this, sbuttondata);

		//	音量
		with(musicvolume = new global.SliderLayer(win, this, "musicvolume", 147, 512,
			"music音量タブ", "", 319, 100))
		{
			.mode	= 3;
			.entersound	= enterse;
			.value	= sf.bgmVolume;
			.readyVisible();
		}

		with(sevolume = new global.SliderLayer(win, this, "sevolume", 172, 548,
			"music音量タブ", "", 319, 100))
		{
			.mode	= 3;
			.entersound	= enterse;
			.value	= sf.seVolume;
			.readyVisible();
		}

		with(back = new global.ExButtonLayer(win, this, "back", 681, 548, "gl_back", "EXTRAメニューへ戻ります。"))
		{
			.mode	= 3;
			.entersound	= enterse;
			.hitThreshold	= 0;
			.readyVisible();
		}

		//	イベント処理の入れ替え
		var btn = mbuttons;
		var kfunc = function(key, shift)
		{
			if(key==VK_UP)			parent.musiclist.focus();
			else if(key==VK_DOWN)	parent.musicvolume.focus();
			else
				global.ExButtonLayer.onKeyDown(key, shift, true);
		};
		while(btn!=void)
		{
			btn.onKeyDown = kfunc incontextof btn;
			btn	= btn.bros;
		}
/*		btn = repeatbuttons;
		while(btn!=void)
		{
			btn.onKeyDown = kfunc incontextof btn;
			btn	= btn.bros;
		}
*/		btn = sbuttons;
		while(btn!=void)
		{
			btn.onKeyDown = function(key, shift)
			{
				if(key==VK_UP)			parent.selist.focus();
				else if(key==VK_DOWN)	parent.musicvolume.focus();
				else
					global.ExButtonLayer.onKeyDown(key, shift, true);
			} incontextof btn;
			btn	= btn.bros;
		}
		back["upper"]	= sbuttons.get("se_fwd");
		back["lefter"]	= sevolume;
		back.onKeyDown = function(key, shift)
		{
			if(key==VK_UP)
				upper.focus();	//	SEの次へボタンへフォーカス移動
			else if(key==VK_LEFT)
				lefter.focus();	//	効果音ボリュームへフォーカス移動
			else if(key==VK_RIGHT || key==VK_DOWN)
				;
			else
				global.ExButtonLayer.onKeyDown(key, shift, true);
		} incontextof back;

		bgm_playno	= void;
		se_playno	= void;
	}

	function finalize()
	{
		release(sevolume);
		release(musicvolume);
		release(selist);
		release(musiclist);
		release(sefiles);
		release(musicfiles);
		release(sbuttons);
		release(repeatbuttons);
		release(mbuttons);
		release(back);
		super.finalize(...);
	}

	function show()
	{
		if(!showed)
		{
			showed	= acceptable = true;
			super.show(...);
			memorizeCurrentBGM();
			stopBGM();
			var win = window;
			win.bgm.owner	= this;
			for(var i=win.se.count-1; i>=0; i--)
				win.se[i].owner	= this;

			musiclist.focus();
		}
	}

	function hide(time=defaulttime, accel, func)
	{
		if(showed)
		{
			showed	= acceptable = false;
			func() if func != void;
			var win = window;
			for(var i=win.se.count-1; i>=0; i--)
				win.se[i].owner	= win;
			win.bgm.owner	= win;
			restoreBGM();
			stopSE();
		}
	}

	function closeThis()
	{
		//	すべてのボタンを押せなくする
		acceptable	= false;
		if(typeof parent.closeChild != "undefined")
			parent.closeChild(this);		//	親に閉じることを伝える
		else
			hideSoundTestMenu();		//	自分で閉じる
	}

	function loadFiles(file, flags)
	{
		var list = [];
		var lines = [].load(file);
		flags	= %[] if flags == void;
		for(var i=0; i<lines.count; i++)
		{
			var line = lines[i];
			if(line != "" && line[0] != ";")
			{
				var params	= [].split("\t", line);
				var choped	= Storages.chopStorageExt(params[0]);
				if(flags[choped]>0 || flags[params[0]]>0)
				{
					//	再生されたことのあるものだけ、表示される
					if(params[1]=="")	//	タイトルが無ければファイル名
						params[1]	= choped;
					dm(params[0]+": "+params[1]);
					list.add(params);
				}
			}
		}
		return list;
	}

	function playMusic()
	{
		dm("play music");
		bgm_playno	= curmusic;
		if(curmusic>=0 && musicfiles[curmusic]!=void)
		{
			dm(@"playBGM(${musicfiles[curmusic][0]})");
			playBGM(musicfiles[curmusic][0], 200, 200, false);	//	looping=trueだと戻ってこないので。
			mbuttons.get("music_play").on();
		}
		else
		{
			var btn = mbuttons.get("music_play");
			btn.state	= btn.state!=0 ? 1 : 0;
		}
	}

	function stopMusic()
	{
		dm("stop music");
		bgm_playno	= void;
		stopBGM();
		mbuttons.get("music_play").off();
	}

	function changeBGM(cur)
	{
		dm("change bgm: "+cur);
		if(!acceptable)
			return;
		if(bgm_playno===cur)
			stopMusic();
		else
			playMusic();
	}

	function playSE()
	{
		se_playno	= curse;
		if(curse>=0 && sefiles[curse]!=void)
		{
			playSound(sefiles[curse][0]);
			sbuttons.get("se_play").on();
		}
		else
		{
			var btn	= sbuttons.get("se_play");
			btn.state	= btn.state!=0 ? 1: 0;
		}
	}

	function stopSE()
	{
//		dm("stop se");
		se_playno	= void;
		stopSound(, 100, true);	//	第2引数: timeを0より大きく設定し、第3引数: nowaitをfalseにすると、KAGが実行を始めてしまうので注意
	}

	function changeSE(cur)
	{
		dm("change se: "+cur);
		if(!acceptable)
			return;
		if(se_playno===cur)
			stopSE();
		else
		{
			stopSE();	//	一度停止する
			playSE();
		}
	}

	function onMouseDown(x, y, button, shift)
	{
		if(!acceptable)
			return;
		if(button == mbRight)
			closeThis();
	}

	function onButtonDown(btn)
	{
		if(!acceptable)	return;
		if(!showed)		return;

		switch(btn.id)
		{
		case "music_rew":
			curmusic--;
			playMusic() if getBGMStatus()=="play";	//	再生中のみ曲を入れ替え
			break;
		case "music_fwd":
			curmusic++;
			playMusic() if getBGMStatus()=="play";	//	再生中のみ曲を入れ替え
			break;

		case "music_play":
			playMusic();	//	停止中は再生する
			break;

		case "se_rew":
			curse--;
			stopSE();
			playSE();
			break;
		case "se_fwd":
			curse++;
			stopSE();
			playSE();
			break;
		case "se_play":
			playSE();
			break;

		case "music_repeat":
			playmode	= "repeat";
			break;
		case "music_allrep":
			playmode	= "allrepeat";
			break;

		case "back":
			playSound(clickse);
			closeThis();
			break;
		}
	}

	function onButtonUp(btn)
	{
		if(!showed || !acceptable)	return;
		switch(btn.id)
		{
		case "music_play":
			stopMusic();
			break;

		case "se_play":
			stopSE();
			break;
		}
	}

	function onBGMFadeCompleted()
	{
	}

	function onBGMStop(source)
	{
		dm("playmode = "+playmode+" / bgm_playno = "+bgm_playno);
		if(bgm_playno!==void)
		{
			if(playmode=="allrepeat")
			{
				//	全曲リピートのときはどんどん再生していく
				curmusic++;
				playMusic();
			}
			else if(playmode=="repeat")
				playMusic();
		}
		else
			mbuttons.get("music_play").off();
	}

	function onSESoundBufferFadeCompleted()
	{
	}

	function onSESoundBufferStop(id)
	{
		se_playno	= void;
		if(getSEStatus()=="stop")
			sbuttons.get("se_play").off();
	}

	function onChangeValue(tab, vol)
	{
		if(tab.id == "musicvolume")
		{
			if(sf.bgmVolume!=vol)
				window.setUserVolume(, vol);
		}
		else
		{
			if(sf.seVolume!=vol)
				window.setUserVolume(,, vol);
		}
	}

	function onMouseWheel(shift, delta, x, y)
	{
		if(x<selist.left-32)
			musiclist.onMouseWheel(...);
		else
			selist.onMouseWheel(...);
	}

	property curmusic
	{
		setter(c)
		{
			if(c!=curmusic)
			{
				var mc = musicfiles.count;
				if(mc<1)	return;
				while(c<0)	c += mc;
				while(c>=mc)c -= mc;
				musiclist.current	= c;
			}
		}
		getter	{ return musiclist.current; }
	}

	property curse
	{
		setter(c)
		{
			if(c!=curse)
			{
				var sc = sefiles.count;
				if(sc<1)	return;
				while(c<0)	c += sc;
				while(c>=sc)c -= sc;
				selist.current	= c;
			}
		}
		getter	{ return selist.current; }
	}
}

//	KAGから開く
var music_menu;
function showSoundTestMenu(st, ret)
{
	if(music_menu !== void)
//		return;
		invalidate music_menu;

	with(music_menu = new MusicMenuLayer(kag, kag.fore.base))
	{
		.show();
		.return_storage	= st;
		.return_label	= ret;
	}
}
global.showMusicMenu	= global.showSoundTestMenu;

function hideSoundTestMenu()
{
//	dm("hide sound test menu: "+Scripts.getTraceString());
	if(music_menu === void)
		return;

	//	次へ
	kag.process(music_menu.return_storage, music_menu.return_label);

	//	閉じる
	music_menu.hide(,, closeSoundTestMenu);
}
global.hideMusicMenu	= global.hideSoundTestMenu;

function closeSoundTestMenu()
{
//	dispose(music_menu);
	heapGarbage(music_menu);	//	廃棄予約をしておいて、トランジション終了後に廃棄可能にする
	music_menu	= void;
}
global.closeMusicMenu	= global.closeSoundTestMenu;

/*----------------------------------------------------------------------------/
/	
/----------------------------------------------------------------------------*/
@endif