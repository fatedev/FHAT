/*-----------------------------------------------------------------------------
/	Copyright (C) 1999-2002 TYPE-MOON All Rights Reserved.
/		サブルーチン
/----------------------------------------------------------------------------*/
@if(__SUBROUTINE_DEFINED__==0)
@set(__SUBROUTINE_DEFINED__=1)

//	重力加速度(Pixel/ms^2)
var AccelerationOfGravity = 9806.65 / 1000 / 1000 * 3;
var AoG	= AccelerationOfGravity;

//	空気密度
var AirDensity	= 1.226;	//	1気圧,15℃:kg/m^3

//	角度 -> ラジアン
var Angle2Radian	= Math.PI / 180;
var A2R	= Angle2Radian;
var Degree2Radian	= Angle2Radian;
var D2R	= Degree2Radian;

//	ラジアン → 角度
var Radian2Degree	= 180 / Math.PI;
var R2D	= Radian2Degree;

//	レイヤーの前後位置
var MostUpperForeAbsolute	= 100000;	//	一番手前の前景位置
var MUFA	= MostUpperForeAbsolute;

var Rules	= [
	"カーテン左から",
	"カーテン上から",
	"シャッター下から",
	"シャッター左から",
	"シャッター上から"
];

//	最小更新間隔
var minInterval	= 16;

if(typeof .dm == "undefined")
	.dm	= Debug.message;

var nearZero	= 0.0001;

/*-----------------------------------------------------------------------------
/	R,G,Bの各値を0xRRGGBB形式に変更
/----------------------------------------------------------------------------*/
function rgb(r,g,b)
{
	return ((int(r) & 0xFF) << 16) | ((int(g) & 0xFF) << 8) | (int(b) & 0xFF);
}

function rgba(r,g,b,a)
{
	return ((int(r) & 0xFF) << 16) | ((int(g) & 0xFF) << 8) | (int(b) & 0xFF) | ((int(a) & 0xFF) << 24);
}

function rgba2str(rgb)
{
	return "0x%02X%02X%02X%02X".sprintf((rgb >> 24) & 0xFF, (rgb >> 16) & 0xFF, (rgb >> 8) & 0xFF, rgb & 0xFF);
}

function rgb2str(rgb)
{
	return "0x%02X%02X%02X".sprintf((rgb >> 16) & 0xFF, (rgb >> 8) & 0xFF, rgb & 0xFF);
}

function _rgb(rgb)
{
	return [ (rgb >> 16) & 0xFF, (rgb >> 8) & 0xFF, rgb & 0xFF ];
}

function saturate(a, max=255, min=0)
{
	return a > max ? max : (a < min ? min : a);
}

function RGBsaturationAddition(data, r, g, b)
{
	var c = _rgb(data);
	c[0] += r;
	c[1] += g;
	c[2] += b;
	return rgb(saturate(c[0]), saturate(c[1]), saturate(c[2]));
}

function RGBalphablend(a, b, rate=0.5)
{
	a = _rgb(a);
	b = _rgb(b);
	var _rate = 1 - rate;
	return rgb(a[0] * rate + b[0] * _rate, a[1] * rate + b[1] * _rate, a[2] * rate + b[2] * _rate);
}

function int2hex(val, digit=8)
{
	var hex = "0123456789ABCDEF";
	var result = "";
	for(var i=0; i<digit; i++)
	{
		result	= hex[val & 0xF] + result;
		val >>= 4;
	}
	return "0x"+result;
}

function hex2int(val)
{
	if(typeof val != "String")
		return 0;

	var hex = "0123456789ABCDEF";
	val	= val.toUpperCase();
	var	result	= 0;
	for(var i=0; i<val.length; i++)
	{
		result	*= 16;
		result	+= hex.indexOf(val[i]);
	}
	return result;
}

/*-----------------------------------------------------------------------------
/	矩形の中に指定の座標が入っているか？
/	in	: x, y	座標
/		: ltx	矩形左上座標のx値もしくは、矩形オブジェクト(left,top,width,height)
/		: lty	矩形左上座標のy値
/		: rbx, rby	矩形右下座標
/	out	: 加減速させた進行度
/----------------------------------------------------------------------------*/
function inRect(x, y, ltx, lty, rbx, rby)
{
//	dm(@"(${x}, ${y}) = (${ltx}, ${lty})-(${rbx}, ${rby})");
//	dm(@"typeof ${ltx} = ${typeof ltx}");
	if(typeof ltx == "Object")
	{
		with(ltx)
		{
			return (((int x - int (.left+.width)) & (int .left - int x) & (int y - int (.top+.height)) & (int .top - int y)) < 0);
		}
	}

//	dm(@"inrect: ${x-rbx}  ${ltx-x}  ${y-rby}  ${lty-y}");
	return (((int x - int rbx) & (int ltx - int x) & (int y - int rby) & (int lty - int y)) < 0);
}

/*-----------------------------------------------------------------------------
/	加速度をもった進行度の変化
/	in	: per	進行度(0.0〜1.0)
/		: accel	加速度(〜(-2:2)〜)
/	out	: 加減速させた進行度
/----------------------------------------------------------------------------*/
function calcAccel(per, accel)
{
	if(accel < 0)
	{
		// 上弦 ( 最初が動きが早く、徐々に遅くなる )
		per = 1.0 - per;
		per = Math.pow(per, -accel);
		per = 1.0 - per;
	}
	else if(accel > 0)
	{
		// 下弦 ( 最初は動きが遅く、徐々に早くなる )
		per = Math.pow(per, accel);
	}

	return per;	//	加減速が行われた後の進行度
}

/*-----------------------------------------------------------------------------
/	文字列比較
/	in	: a, b	比較する文字列
/	out	: [a>b] > 0 / [a==b] == 0 / [a<b] < 0
/----------------------------------------------------------------------------*/
function strcmp(a, b)
{
	if(a==b)
		return 0;

	var i=0;
	while(1)
	{
		if(i>=b.length)	return -1;	//	bの方が長ければbが大きい(含む同文字列長)
		if(i>=a.length)	return 1;	//	aの方が長ければaが大きい
		if(#a[i]<#b[i])			return -1;	//	一文字ずつ比較
		else if(#a[i]>#b[i])	return 1;
		i++;
	}
}

/*-----------------------------------------------------------------------------
/	シェルソート
/	in	: keys		シェルソートするArray
/		: compare	比較関数(a<bのとき0より大きな整数を返す)
/	out	: 
/----------------------------------------------------------------------------*/
function shellsort(keys, compare=void)
{
	if(keys.count<1)	return;
	if(compare==void)
		compare = function(a,b) { return a<b; };	//	単純比較の昇順

	var SHELL	= 3;
	var shell;
	for(shell = 1; shell < keys.count; shell = shell * SHELL + 1);

	while(shell > 0)
	{
		for(var i=shell; i<keys.count; i++)
		{
			var num = i;
			var tmp = keys[num];
			while((num >= shell) && compare(tmp, keys[num - shell])>0)
			{
				keys[num]	= keys[num - shell];
				num -= shell;
			}
			keys[num] = tmp;
		}
		shell \= SHELL;
	}
}
function descend(a, b)
{
	return a>b;	//	単純比較・降順
}

/*-----------------------------------------------------------------------------
/	指定のオブジェクトを解放する
/	in	: a	オブジェクト
/	out	: 
/----------------------------------------------------------------------------*/
function release(a)
{
/*	if(typeof a != "Object")
		throw new Exception("Object以外のものをinvalidateしようとしました。");
	else*/
	if(a != void && typeof a == "Object")
		invalidate a;
}

/*-----------------------------------------------------------------------------
/	指定の配列を解放する
/	in	: a	配列
/	out	: 
/----------------------------------------------------------------------------*/
function releaseArray(a)
{
	if(a != void && typeof a == "Object")
	{
		for(var i=0; i<a.count; i++)
			invalidate a[i] if a[i] != void;
		invalidate a;
	}
}

/*-----------------------------------------------------------------------------
/	指定の辞書配列を解放する
/	in	: a	辞書配列
/	out	: 
/----------------------------------------------------------------------------*/
function releaseDictionary(a)
{
	if(a != void && typeof a == "Object")
	{
		var keys = [];
		keys.assign(a);
		for(var i=0; i<keys.count; i+=2)
		{
//			dm(keys[i]+" = "+keys[i+1]);
			invalidate keys[i+1] if keys[i+1] != void;
		}
		invalidate a;
	}
}

/*-----------------------------------------------------------------------------
/	微小物の放物運動
/	in	: vx0, vy0	初速(画面座標系:pixel/ms^2)
/		: t			時刻(ms)
/		: a			断面積(mm^2)
/		: cd		空気抵抗係数
/	out	: [vx_t, vy_t, px, py]	指定時刻での速度と座標
/----------------------------------------------------------------------------*/
function getParabolaMotion(vx0, vy0, t, a=0.0, cd=0.0)
{
	if(a!=0.0 && cd!=0.0)
		return getParabolaMotionWithAirResistance(...);

	var vy_t	= vy0 + AoG * t;

	var px	= vx0 * t;
	var py	= vy0 * t + 0.5 * AoG * t * t;

	return [vx0, vy_t, px, py];
}

function getParabolaMotionWithAirResistance(vx0, vy0, t, a, cd)
{
	var k	= 0.5 * cd * a * AirDensity;	//	抵抗係数

	var E	= Math.exp(-k * t);
	var C1_k= 1.0 / k;
	var Cg_k= AoG * C1_k;

	//	指定時刻での速度
	var vx_t= vx0 * E;
	var vy_t= Cg_k + (vx0 - Cg_k) * E;

	//	指定時刻での位置
	var px	= (vx0 / k) * (1.0 - E);
	var py	= Cg_k * t + C1_k * (vy0 - Cg_k) * (1 - E);

	return [vx_t, vy_t, px, py];
}

/*-----------------------------------------------------------------------------
/	回転するアフィン行列
/	in	: cx, cy	中心座標
/		: rad		角度(ラジアン)
/	out	: [[m00, m01], [m10, m11], [m20, m21]]	アフィン行列
/----------------------------------------------------------------------------*/
function getRotateAffine(cx, cy, rad)
{
	var sin	= Math.sin(rad);
	var cos	= Math.cos(rad);
	return [[cos, -sin], [sin, cos], [cx-cx*cos-cy*sin, cy+cx*sin-cy*cos]];
}

/*-----------------------------------------------------------------------------
/	逆正接関数(2)
/	in	: x, y	二辺
/	out	: 角度(ラジアン:-PI〜PI)
/----------------------------------------------------------------------------*/
function atan2(x, y)
{
	if(x == 0.0)
		x	= 0.0000000000000000000000000000000000000000000001;

	var rad	= Math.atan(Math.abs(y/x));
	if(y<=0)
	{
		if(x>=0)
			return rad;	//	第一象限
		else
			return Math.PI - rad;	//	第二象限
	}
	else
	{
		if(x<0)
			return Math.PI + rad;	//	第三象限
		else
			return Math.PI + Math.PI - rad;	//	第四象限
	}
}

/*----------------------------------------------------------------------------/
/	ファイルリストアップ
/----------------------------------------------------------------------------*/
function getFiles(searchdir)
{
	Plugins.link("dirlist.dll");
	var dirs	= [searchdir];
	var files	= [];
	for(var i=0; i<dirs.count; i++)
	{
		var dir = dirs[i];
		var storages = global.getDirList(dir);
		for(var j=0; j<storages.count; j++)
		{
			var file = storages[j];
			if(file[0] == ".")
				continue;	//	"."や".."は無視
			else if(file[file.length-1] == "/")
				dirs.add(dir + file);	//	ディレクトリは検索対象にまわす。
			else
				files.add(dir + file);	//	ルールファイルを追加
		}
	}
	Plugins.unlink("dirlist.dll");
	return files;
}

/*-----------------------------------------------------------------------------
/	ビット演算のNOT
/	in	: 
/	out	: 
/----------------------------------------------------------------------------*/
function NOT(value)
{
	return 0xFFFFFFFF ^ value;
}

/*-----------------------------------------------------------------------------
/	小さいほうの添え字を返す二分探索
/	in	: x	探す値
/		: a	配列
/	out	: 添え字
/----------------------------------------------------------------------------*/
function binarysearch_min(x, a)
{
	var left	= 0;
	var right	= a.count;
	var mid;

	while(left<right)
	{
		mid	= (left+right) >> 1;
		if(a[mid] <= x)
			left	= mid + 1;
		else
			right	= mid;
	}
	return left-1;
}

/*-----------------------------------------------------------------------------
/	大きいほうの添え字を返す二分探索
/	in	: x	探す値
/		: a	配列
/	out	: 添え字
/----------------------------------------------------------------------------*/
function binarysearch_max(x, a)
{
	var left	= 0;
	var right	= a.count;
	var mid;

	while(left<right)
	{
		mid	= (left+right) >> 1;
		if(a[mid] < x)
			left	= mid + 1;
		else
			right	= mid;
	}
	return left;
}

//-	音関係 --------------------------------------------------------------------
var lastPlaying = [];	//	再生中であったBGMの履歴
var lastLooping = [];	//	BGMがループ再生であったか？
var BGMFadeTime	= 800;	//	デフォルトのフェード時間
var BGMOverlap	= 800;	//	デフォルトのオーバーラップ時間
function initSound() {}	//	イリヤ城用のサウンド初期化
/*-----------------------------------------------------------------------------
/	BGM再生
/	in	: file		再生ファイル
/		: fadetime	フェード時間
/		: looping	ループするか
/		: volume	再生ボリューム
/	out	: 
/----------------------------------------------------------------------------*/
function playBGM(file, time=BGMFadeTime, overlap=BGMOverlap, looping=true, volume=100)
{
	if(file!="")
	{
		with(kag.bgm)
		{
			.setVolume(volume*1000);
			if(.currentBuffer.status=="play")
			{
				dm("BGM: "+.playingStorage+" -> "+file);
				.exchange(%[storage:file, loop:looping, time:time, overlap:overlap]);
			}
			else
			{
//				.volume	= volume * 1000;
				if(time>0)
					.fadeIn(%[storage:file, loop:looping, time:time]);
				else
					.play(%[storage:file, loop:looping]);
				dm("BGM: "+file);
			}
//			dm("current / playing = "+.currentStorage+" / "+.playingStorage);
		}
		global.tf.playedMusic	= %[] if global.tf.playedMusic == void;
		global.tf.playedMusic[Storages.extractStorageName(file)]++;	//	再生回数の記録
	}
}

/*-----------------------------------------------------------------------------
/	BGMの再生状態を取得する
/	in	: 
/	out	: 状態
/----------------------------------------------------------------------------*/
function getBGMStatus()
{
	return kag.bgm.currentBuffer.status;
}

/*-----------------------------------------------------------------------------
/	BGM切り替え
/	in	: file		再生ファイル
/		: fadetime	フェード時間
/		: overlap	オーバーラップ時間
/		: looping	ループするか
/	out	: 
/----------------------------------------------------------------------------*/
function changeBGM(file, time=BGMFadeTime, overlap=BGMOverlap, looping=true)
{
	if(file=="")
		return;

	var bgm = kag.bgm;
	var lf = bgm.playingStorage;
	if(lf!=file)
	{
		memorizeCurrentBGM();
		bgm.exchange(%[storage:file, loop:looping, time:time, overlap:overlap]);
		dm("BGM: "+lf+" -> "+file);
		global.tf.playedMusic	= %[] if global.tf.playedMusic == void;
		global.tf.playedMusic[Storages.extractStorageName(file)]++;	//	再生回数の記録
	}
}

/*-----------------------------------------------------------------------------
/	再生中のBGMを記憶する
/	in	: 
/	out	: 
/----------------------------------------------------------------------------*/
function memorizeCurrentBGM()
{
	var bgm = kag.bgm;
	if(bgm.playingStorage!="")
	{
		lastPlaying.add(bgm.playingStorage);
		lastLooping.add(bgm.looping);
	}
}

/*-----------------------------------------------------------------------------
/	BGM修復
/	in	: fadetime	フェード時間
/		: overlap	オーバーラップ時間
/	out	: 
/----------------------------------------------------------------------------*/
function restoreBGM(time=BGMFadeTime, overlap=BGMOverlap)
{
	var bgm = kag.bgm;
	if(lastPlaying.count>0)
	{
		var no = lastPlaying.count-1;
		var lf = lastPlaying[no];
		var lp = lastLooping[no];
		if(lf!="")
		{
			bgm.exchange(%[storage:lf, loop:lp, time:time, overlap:overlap]) if lf!=bgm.playingStorage;
			dm("BGM: "+bgm.playingStorage+" -> "+lf);
		}

		lastPlaying.erase(no);
		lastLooping.erase(no);
	}
	else
	{
		stopBGM(...);
	}
}

/*-----------------------------------------------------------------------------
/	BGM停止
/	in	: fadetime	フェード時間
/		: overlap	オーバーラップ時間
/	out	: 
/----------------------------------------------------------------------------*/
function stopBGM(time=BGMFadeTime, overlap=BGMOverlap)
{
	var bgm	= kag.bgm;
	if(bgm.playingStorage!="")
	{
		bgm.stopFade();
		if(time>0)
			bgm.fadeOut(%[time:time]);
		else
			bgm.stop();
		dm("BGM: "+bgm.playingStorage+" -> stop");
		bgm.playingStorage	= "";//	playingStorageを再生中かのキーに使っている
								//	ので、フェードが終わるよりも先に無効にして
								//	いる
	}
}

/*-----------------------------------------------------------------------------
/	BGMを指定のボリュームに変化させる
/	in	: volume	変化させるボリューム
/		: time		フェード時間
/	out	: 
/----------------------------------------------------------------------------*/
function fadeBGM( volume, time=BGMFadeTime )
{
	var bgm	= kag.bgm;
	if(bgm.playingStorage!="")
	{
		bgm.stopFade();
		bgm.fade( %[volume:volume,time:time] );
	}
}

/*-----------------------------------------------------------------------------
/	効果音バッファの選択
/	in	: file	再生を行う効果音ファイル名
/		: loop	ループ再生を行うか？
/	out	: 
/----------------------------------------------------------------------------*/
function selectSoundBuffer(file, loop=false)
{
	var cur = f.current_SEbuffer;
	var i;
	var	ses	= kag.se;
	for(i=ses.count-1; i>0; i--)
	{
		cur++;
		cur = 0 if cur>=ses.count;
//		dm("kag.se["+cur+"].playingStorage: "+ses[cur].playingStorage);
		if(ses[cur].playingStorage=="")
			break;
	}
	if(i==0)
		dm("効果音再生バッファの数が不足しています！");
	f.bufno	= f.current_SEbuffer= cur;
}

/*-----------------------------------------------------------------------------
/	効果音の再生
/	in	: file		再生するファイル
/		: nowait	フェードアウト終了を待たない(Def:true)
/		: volume	再生ボリューム(Def:100)
/	out	: 
/----------------------------------------------------------------------------*/
function playSound(file, nowait=true, volume=100)
{
	if(file=="")	return;		//	ファイルが指定されてないと再生できない
	if(nowait=="")	nowait	= true;

	selectSoundBuffer(file, false);
	var win = kag;
	with(win.se[f.bufno])
	{
		.setOptions(%[volume:volume]);
		.play(%[storage:file]);
	}
	if(nowait!=true)
		win.waitSEStop(%[buf:f.bufno]);

	global.tf.playedSE	= %[] if global.tf.playedSE == void;
	global.tf.playedSE[Storages.extractStorageName(file)]++;	//	再生回数の記録
}

/*-----------------------------------------------------------------------------
/	効果音のループ再生
/	in	: file	再生するファイル
/		: time	フェードイン時間(Def:0)
/		: nowait	フェードイン終了を待たない(Def:true)
/		: volume	再生ボリューム(Def:100)
/	out	: 
/----------------------------------------------------------------------------*/
function loopSound(file, time=0, nowait=true, volume=100)
{
	if(file=="")	return;		//	ファイルが指定されてないと再生できない
	if(nowait=="")	nowait	= true;
	selectSoundBuffer(file, true);
	var win = kag;
	with(win.se[f.bufno])
	{
		.setOptions(%[volume:volume]);
		if(+time<1)
			.play(%[storage:file,loop:true]);	//	フェードインなしで再生開始
		else
		{
			.fadeIn(%[storage:file,time:time,loop:true]);
			if(nowait!=true)
				win.waitSEStop(%[buf:f.bufno,time:time,canskip:false,mode:"normal"]);
		}
	}
}

/*-----------------------------------------------------------------------------
/	指定の効果音が再生されているバッファの番号を取得
/	in	: file	停止する効果音ファイル名
/	out	: バッファ番号(再生されていなければvoid)
/----------------------------------------------------------------------------*/
function getPlayBuffer(storage)
{
	var bufno	= void;
	var se		= kag.se;
//	dm(@"getPlayBuffer: se.count = ${se.count} / storage = ${storage}");
	if(storage!="")
	{
		storage	= Storages.chopStorageExt(storage);
		for(var i=se.count-1; i>=0; i--)
		{
			//	指定のファイルが再生されている時
//			dm(@"se[${i}].playingStorage = ${se[i].playingStorage}");
			if(se[i].playingStorage==storage)
			{
//				dm("sound buffer["+i+"] = "+ses[i].playingStorage);
				bufno = i;
				break;
			}
		}
	}
	return bufno;
}

/*-----------------------------------------------------------------------------
/	ループ効果音の停止
/	in	: file	停止する効果音ファイル名
/		: time	フェード時間(指定が無ければフェードしない)
/		: nowait	フェードの終了を待つか？(Def:false)
/	out	: 
/----------------------------------------------------------------------------*/
function stopSound(file="", time=0, nowait=false)
{
	//	ファイル名が指定されているなら、対応するバッファ番号を調べる
	var bufno;
	if(file != "")
	{
		bufno = getPlayBuffer(file);
		dm("\""+file+"\"の効果音再生中のバッファ: "+bufno);
	}

	var se	= kag.se;
	if(bufno !== void)
	{
		//	バッファを指定して停止する
		if(bufno<se.count)
		{
			if(time>0)
			{
				se[bufno].fadeOut(%[time:time]);
				if(!nowait)
					kag.doWait(%[time:time,canskip:false,mode:"normal"]);
			}
			else
				se[bufno].stop();
		}
	}
	else if(file == "")
	{
		//	すべて停止する
		if(time>0)
		{
			for(var i=se.count-1; i>=0; i--)
			{
				se[i].fadeOut(%[time:time]);
				se[i].playingStorage	= "";
			}
			if(!nowait)
				kag.doWait(%[time:time,canskip:false,mode:"normal"]);
		}
		else
		{
			for(var i=se.count-1; i>=0; i--)
			{
				se[i].stop();
			}
		}
	}
}

/*-----------------------------------------------------------------------------
/	サウンドバッファの状態を取得
/	in	: bufno	バッファ番号
/	out	: 
/----------------------------------------------------------------------------*/
function getSEStatus(bufno=-1)
{
	var secnt	= kag.numSEBuffers;
	var se		= kag.se;
	if(bufno<0 || bufno>=secnt)
	{
		for(var i=0; i<secnt; i++)
		{
			if(se[i].status == "play")
				return "play";	//	いずれか一つでも再生中なら全体は再生中
		}
		return "stop";
	}
	else
		return se[bufno].status;
}

/*-----------------------------------------------------------------------------
/	表示画面の重ね合わせ
/	in	: page	重ね合わせるページ(default:fore)
/		: leave	重ね合わせたレイヤーを残しておくか
/		: dest	描画先レイヤー
/	out	: 重ねあわしたレイヤー(leave=true)
/----------------------------------------------------------------------------*/
function mergeScreen(page="fore", leave=false, dest="base")
{
	var win = kag;
	if(win[page]==void)
		return false;
	var pri = win[page].base;
	var layer = new global.Layer(win, pri);
	var w = pri.imageWidth, h = pri.imageHeight;
	layer.setSize(w, h);
	layer.piledCopy(0, 0, pri, 0, 0, w, h);

	var vlno;
	if(dest == "base")
	{
		//	背景へコピー
		pri.copyRect(0, 0, layer, 0, 0, w, h);
	}
	else
	{
		//	前景へコピー
		vlno	= int dest;
		with(win[page].layers[vlno])
		{
			.setSize(w, h);
			.setPos(0, 0);
			.copyRect(0, 0, layer, 0, 0, w, h);
		}
	}

	//	前景はすべて非表示
	var layers = win[page].layers;
	for(var i=win.numCharacterLayers-1; i>=0; i--)
		layers[i].visible = false if i !== vlno;

	if(leave)
		return layer;

	invalidate layer;
	return true;
}

/*-----------------------------------------------------------------------------
/	画像ファイルの有無をチェック
/	in	: storage	ファイル名(拡張子なしでも可)
/	out	: 
/----------------------------------------------------------------------------*/
function isExistentImage(storage)
{
	var	exts	= [ "png", "tlg", "jpg", "bmp" ];
	storage		= Storages.chopStorageExt(Storages.extractStorageName(storage));
	var	isexist	= Storages.isExistentStorage;
	for(var i=0; i<exts.count; i++)
	{
		if(isexist(storage+"."+exts[i]))
		{
//			dm(@"exist: ${storage} => ${storage}.${exts[i]}");
			return true;
		}
	}
//	dm(@"not exist: ${storage}");
	return false;
}

/*-----------------------------------------------------------------------------
/	音声ファイルの有無をチェック
/	in	: storage	ファイル名(拡張子なしでも可)
/	out	: 
/----------------------------------------------------------------------------*/
function isExistentSound(storage)
{
	var	exts	= [ "wav", "ogg", "tcw" ];
	storage		= Storages.chopStorageExt(Storages.extractStorageName(storage));
	var	isexist	= Storages.isExistentStorage;
	for(var i=0; i<exts.count; i++)
	{
		if(isexist(storage+"."+exts[i]))
		{
//			dm(@"exist: ${storage} => ${storage}.${exts[i]}");
			return true;
		}
	}
//	dm(@"not exist: ${storage}");
	return false;
}

/*-----------------------------------------------------------------------------
/	アフィン変換描画を簡単に行うためのクラス
/----------------------------------------------------------------------------*/
class easyAffineTransform
{
	var matrix;

	//	行列の初期化
	function initProgrammableTransformation()
	{
		matrix	= void;
	}

	//	移動させる
	function addTransferMatrix(x, y)
	{
		if(matrix===void)
		{
			//	そのまま入れる
			matrix	= [
				1, 0, 0,
				0, 1, 0,
				x, y, 1
			];
		}
		else
		{
			//	掛け合わせる
			matrix[6]	+= x;
			matrix[7]	+= y;
		}
	}

	//	回転させる
	function addRotateMatrix(theta)
	{
		var cs	= Math.cos(theta);
		var sn	= Math.sin(theta);
		if(matrix===void)
		{
			//	そのまま入れる
			matrix	= [
				cs, -sn, 0,
				sn,  cs, 0,
				 0,   0, 1
			];
		}
		else
		{
			//	掛ける
			var	matrix_0_	= matrix[0];
			var	matrix_3_	= matrix[3];
			var	matrix_6_	= matrix[6];
			matrix[0]	=  matrix[0] * cs + matrix[1] * sn;	//	2重に回転させなければ、
			matrix[1]	= -matrix_0_ * sn + matrix[1] * cs;	//	二つ目の掛け算は不要
			matrix[3]	=  matrix[3] * cs + matrix[4] * sn;	//					不要
			matrix[4]	= -matrix_3_ * sn + matrix[4] * cs;	//					不要
			matrix[6]	=  matrix[6] * cs + matrix[7] * sn;	//	ココは移動で関係するので
			matrix[7]	= -matrix_6_ * sn + matrix[7] * cs;	//	必要
		}
	}

	//	拡縮させる
	function addMagnifyMatrix(sx, sy)
	{
		if(matrix===void)
		{
			//	そのまま入れる
			matrix	= [
				sx,  0, 0,
				 0, sy, 0,
				 0,  0, 1
			];
		}
		else
		{
			//	掛ける
			matrix[0]	*= sx;
			matrix[1]	*= sy;
			matrix[3]	*= sx;
			matrix[4]	*= sy;
			matrix[6]	*= sx;
			matrix[7]	*= sy;
		}
	}

	//	左右反転させる
	function addMirrorLRMatrix()
	{
		if(matrix===void)
		{
			matrix	= [
				-1, 0, 0,
				 0, 1, 0,
				 0, 0, 1
				];
		}
		else
		{
			matrix[0]	*= -1;
		}
	}

	//	上下反転させる
	function addMirrorUDMatrix()
	{
		if(matrix===void)
		{
			matrix	= [
				1,  0, 0,
				0, -1, 0,
				0,  0, 1
				];
		}
		else
		{
			matrix[4]	*= -1;
		}
	}

	//	実際にコピー
	function transformByProgram(dest, src, sleft, stop, swidth, sheight, mode=stNearest, opac=255)
	{
		if(matrix!=void)
		{
			with(dest)
			{
				var lastface= .face;
/*				if(src.type == ltAlpha || src.type == ltAddAlpha)
					.face	= dfAlpha;	//	描画できるのはdfAlphaのみ
				else
*/					.face	= dfOpaque,	.holdAlpha	= false;
				.operateAffine(src, sleft, stop, swidth, sheight, true,
					matrix[0], matrix[1], matrix[3], matrix[4], matrix[6], matrix[7], omOpaque, opac, mode);
				.face	= lastface;	//	元に戻す
			}
		}
	}

	//	アフィン行列のクリア
	function clear()
	{
		matrix	= void;
	}

	//	アフィン行列と座標の積
	function calc(x, y)
	{
		var m = matrix;
		return [ m[0]*x + m[3]*y + m[6], m[1]*x + m[4]*y + m[7] ];
	}
}

/*-----------------------------------------------------------------------------
/	全体の状態の設定
/	in	: mode	system=システムメニュー時 / scenario=シナリオ表示時
/	out	: 
/----------------------------------------------------------------------------*/
function setSystemMode(mode="system")
{
	var win = kag;
	switch(mode)
	{
	case "system":
		win.cancelSkip();		//	スキップ停止
		win.cancelAutoMode();	//	オートモード停止
		win.setRightClickOptions(%[call:false]);//	右クリック無効
		win.historyEnabled		= false;		//	テキスト履歴は無効
		.shortcut_object.enabled= false;		//	ショートカットキーは無効
		break;

	case "scenario":
		if(win.historyWriteEnabled)
			win.historyLayer.repage();	//	テキスト履歴の改ページを送る
		win.clearMessageLayers(true);	//	全てのメッセージレイヤーを消去
		win.setRightClickOptions(%[call:true]);	//	右クリックを有効にする
		win.historyEnabled	= true;		//	テキスト履歴を有効に
		.shortcut_object.enabled= true;		//	ショートカットキーを有効に
		break;
	}
}

/*-----------------------------------------------------------------------------
/	指定の幅に合わせて文を分割する
/	in	: line	分割する文
/		: width	幅
/		: fgtw	文の実際の幅を返すクロージャ
/----------------------------------------------------------------------------*/
function	divideAccordingToWidth(line, width, fgtw)
{
	var	lines	= [];
	while(fgtw(line)>width)
	{
		var	len		= line.length;
		var	pos		= len>>1;
		var	max = len, min = 0;
		do
		{
			if(fgtw(line.substr(0, pos))>width)
			{
				max	= pos;
				pos	-= (pos - min)>>1;
			}
			else
			{
				min	= pos;
				pos	+= (max - pos)>>1;
			}
		}
		while(max-min>1);
		lines.add(line.substr(0, min));
		line	= line.substr(min);
	}
	lines.add(line);

	return lines;
}

/*-----------------------------------------------------------------------------
/	縁取りありの長方形を描画する
/	in	: layer	描画先
/		: l, t	左上
/		: w, h	幅、高さ
/		: ic	内部の色
/		: lw	縁取りの幅
/		: lc	縁取りの色
/	out	: 
/----------------------------------------------------------------------------*/
function drawEdgeRect(layer, l, t, w, h, ic=0xFFFFFFFF, lw=1, lc=0xFF000000)
{
	layer.fillRect(l+lw, t+lw, w-(lw<<1), h-(lw<<1), ic);
	drawEdge(layer, l, t, w, h, lw, lc);
}

/*-----------------------------------------------------------------------------
/	縁を描画する
/	in	: layer	描画先
/		: l, t	左上
/		: w, h	幅、高さ
/		: lw	縁取りの幅
/		: lc	縁取りの色
/	out	: 
/----------------------------------------------------------------------------*/
function drawEdge(layer, l, t, w, h, lw=1, lc=0xFF000000)
{
	with(layer)
	{
		.fillRect(l, t, w, lw, lc);
		.fillRect(l, t+lw, lw, h-lw, lc);
		.fillRect(l+w-lw, t+lw, lw, h-lw, lc);
		.fillRect(l+lw, t+h-lw, w-(lw<<1), lw, lc);
	}
}

/*-----------------------------------------------------------------------------
/	四隅に"「"のある長方形を描画する
/	in	: layer	描画先
/		: l, t	左上
/		: w, h	幅、高さ
/		: ic	内部の色
/		: edge	"「"の幅
/		: spc	"「"と長方形の間の隙間
/		: ec	"「"の色
/	out	: 
/----------------------------------------------------------------------------*/
function drawCursorRect(layer, l, t, w, h, ic=0xFFFFFFFF, edge=2, spc=1, ec=0xFF000000)
{
	var	out	= edge+spc;
	var	out2= out<<1;
	with(layer)
	{
		.fillRect(l, t, w, h, ic);
		.fillRect(l, t, out2, edge, ec);
		.fillRect(l, t+edge, edge, out2-edge, ec);
		.fillRect(l+w-out2, t, out2, edge, ec);
		.fillRect(l+w-edge, t+edge, edge, out2-edge, ec);
		.fillRect(l, t+h-out2, edge, out2-edge, ec);
		.fillRect(l, t+h-edge, out2, edge, ec);
		.fillRect(l+w-edge, t+h-out2, edge, out2-edge, ec);
		.fillRect(l+w-out2, t+h-edge, out2, edge, ec);
	}
}

/*-----------------------------------------------------------------------------
/	ベクタークラス
/----------------------------------------------------------------------------*/
class Vector
{
	var x, y;

	function Vector(x = 0, y = 0)
	{
		set(...);
	}

	function set(x, y)
	{
		this.x	= x;
		this.y	= y;
	}

	//	コピー
	function assign(vector)	{ x = vector.x; y = vector.y; }

	//	加減乗除
	function add(vector)	{ x += vector.x; y += vector.y; }
	function sub(vector)	{ x -= vector.x; y -= vector.y; }
	function mul(scalar)	{ x *= scalar; y *= scalar; }
	function div(scalar)	{ x /= scalar; y /= scalar; }

	//	正規化(単位ベクトル化)
	function normalize(len=length)
	{
		x	/= len;
		y	/= len;
	}

	//	ベクターの長さ
	property length
	{
		getter
		{
			return Math.sqrt(x*x + y*y);
		}
	}

	//	ベクターが0か
	property byZero
	{
		getter
		{
			return Math.abs(x) < nearZero && Math.abs(y) < nearZero;
		}
	}
}


/*-----------------------------------------------------------------------------
/	
/	in	: 
/	out	: 
/----------------------------------------------------------------------------*/

/*-----------------------------------------------------------------------------
/	
/	in	: 
/	out	: 
/----------------------------------------------------------------------------*/

/*-----------------------------------------------------------------------------
/	
/	in	: 
/	out	: 
/----------------------------------------------------------------------------*/

Scripts.execStorage("OriginalMover.tjs");

@endif
